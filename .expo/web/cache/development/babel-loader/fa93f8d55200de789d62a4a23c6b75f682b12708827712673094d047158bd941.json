{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar minmax = function () {\n  var _f = function _f(value, start, end) {\n    return Math.min(Math.max(value, start), end);\n  };\n  _f._closure = {};\n  _f.asString = \"function _f(value,start,end){return Math.min(Math.max(value,start),end);}\";\n  _f.__workletHash = 12387352865556;\n  _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (10:15)\";\n  return _f;\n}();\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n    drawerPosition = _ref.drawerPosition,\n    drawerStyle = _ref.drawerStyle,\n    drawerType = _ref.drawerType,\n    gestureHandlerProps = _ref.gestureHandlerProps,\n    hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n    keyboardDismissMode = _ref.keyboardDismissMode,\n    onClose = _ref.onClose,\n    onOpen = _ref.onOpen,\n    open = _ref.open,\n    overlayStyle = _ref.overlayStyle,\n    renderDrawerContent = _ref.renderDrawerContent,\n    renderSceneContent = _ref.renderSceneContent,\n    statusBarAnimation = _ref.statusBarAnimation,\n    swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n    swipeEdgeWidth = _ref.swipeEdgeWidth,\n    swipeEnabled = _ref.swipeEnabled,\n    swipeVelocityThreshold = _ref.swipeVelocityThreshold,\n    overlayAccessibilityLabel = _ref.overlayAccessibilityLabel;\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref3 = StyleSheet.flatten(drawerStyle) || {},\n      _ref3$width = _ref3.width,\n      width = _ref3$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref3$width;\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n    return typeof width === 'number' ? width : 0;\n  };\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function () {\n    var _f = function _f(open) {\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n      return open ? 0 : drawerWidth;\n    };\n    _f._closure = {\n      drawerPosition: drawerPosition,\n      drawerWidth: drawerWidth\n    };\n    _f.asString = \"function _f(open){const{drawerPosition,drawerWidth}=jsThis._closure;{if(drawerPosition==='left'){return open?0:-drawerWidth;}return open?0:drawerWidth;}}\";\n    _f.__workletHash = 4752955090285;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (53:50)\";\n    return _f;\n  }(), [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function () {\n    var _f = function _f(_ref2) {\n      var open = _ref2.open,\n        isUserInitiated = _ref2.isUserInitiated,\n        velocity = _ref2.velocity;\n      var translateX = getDrawerTranslationX(open);\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity: velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01\n      });\n      if (!isUserInitiated) {\n        return;\n      }\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    };\n    _f._closure = {\n      getDrawerTranslationX: getDrawerTranslationX,\n      touchStartX: touchStartX,\n      touchX: touchX,\n      translationX: translationX,\n      withSpring: withSpring,\n      runOnJS: runOnJS,\n      onOpen: onOpen,\n      onClose: onClose\n    };\n    _f.asString = \"function _f(_ref2){const{getDrawerTranslationX,touchStartX,touchX,translationX,withSpring,runOnJS,onOpen,onClose}=jsThis._closure;{let{open:open,isUserInitiated:isUserInitiated,velocity:velocity}=_ref2;const translateX=getDrawerTranslationX(open);touchStartX.value=0;touchX.value=0;translationX.value=withSpring(translateX,{velocity:velocity,stiffness:1000,damping:500,mass:3,overshootClamping:true,restDisplacementThreshold:0.01,restSpeedThreshold:0.01});if(!isUserInitiated){return;}if(open){runOnJS(onOpen)();}else{runOnJS(onClose)();}}}\";\n    _f.__workletHash = 284988876842;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (110:41)\";\n    return _f;\n  }(), [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer({\n      open: open,\n      isUserInitiated: false\n    });\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function () {\n      var _f = function _f(event, ctx) {\n        ctx.hasCalledOnStart = false;\n        ctx.startX = translationX.value;\n        gestureState.value = event.state;\n        touchStartX.value = event.x;\n      };\n      _f._closure = {\n        translationX: translationX,\n        gestureState: gestureState,\n        touchStartX: touchStartX\n      };\n      _f.asString = \"function _f(event,ctx){const{translationX,gestureState,touchStartX}=jsThis._closure;{ctx.hasCalledOnStart=false;ctx.startX=translationX.value;gestureState.value=event.state;touchStartX.value=event.x;}}\";\n      _f.__workletHash = 7995461185439;\n      _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (144:13)\";\n      return _f;\n    }(),\n    onActive: function () {\n      var _f = function _f(event, ctx) {\n        touchX.value = event.x;\n        translationX.value = ctx.startX + event.translationX;\n        gestureState.value = event.state;\n        if (!ctx.hasCalledOnStart) {\n          ctx.hasCalledOnStart = true;\n          runOnJS(onGestureStart)();\n        }\n      };\n      _f._closure = {\n        touchX: touchX,\n        translationX: translationX,\n        gestureState: gestureState,\n        runOnJS: runOnJS,\n        onGestureStart: onGestureStart\n      };\n      _f.asString = \"function _f(event,ctx){const{touchX,translationX,gestureState,runOnJS,onGestureStart}=jsThis._closure;{touchX.value=event.x;translationX.value=ctx.startX+event.translationX;gestureState.value=event.state;if(!ctx.hasCalledOnStart){ctx.hasCalledOnStart=true;runOnJS(onGestureStart)();}}}\";\n      _f.__workletHash = 2717092431621;\n      _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (150:14)\";\n      return _f;\n    }(),\n    onEnd: function () {\n      var _f = function _f(event) {\n        gestureState.value = event.state;\n        var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n        toggleDrawer({\n          open: nextOpen,\n          isUserInitiated: true,\n          velocity: event.velocityX\n        });\n      };\n      _f._closure = {\n        gestureState: gestureState,\n        SWIPE_DISTANCE_MINIMUM: SWIPE_DISTANCE_MINIMUM,\n        swipeVelocityThreshold: swipeVelocityThreshold,\n        swipeDistanceThreshold: swipeDistanceThreshold,\n        drawerPosition: drawerPosition,\n        open: open,\n        toggleDrawer: toggleDrawer\n      };\n      _f.asString = \"function _f(event){const{gestureState,SWIPE_DISTANCE_MINIMUM,swipeVelocityThreshold,swipeDistanceThreshold,drawerPosition,open,toggleDrawer}=jsThis._closure;{gestureState.value=event.state;const nextOpen=Math.abs(event.translationX)>SWIPE_DISTANCE_MINIMUM&&Math.abs(event.translationX)>swipeVelocityThreshold||Math.abs(event.translationX)>swipeDistanceThreshold?drawerPosition==='left'?(event.velocityX===0?event.translationX:event.velocityX)>0:(event.velocityX===0?event.translationX:event.velocityX)<0:open;toggleDrawer({open:nextOpen,isUserInitiated:true,velocity:event.velocityX});}}\";\n      _f.__workletHash = 5030620258728;\n      _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (163:11)\";\n      return _f;\n    }(),\n    onFinish: function () {\n      var _f = function _f() {\n        runOnJS(onGestureFinish)();\n      };\n      _f._closure = {\n        runOnJS: runOnJS,\n        onGestureFinish: onGestureFinish\n      };\n      _f.asString = \"function _f(){const{runOnJS,onGestureFinish}=jsThis._closure;{runOnJS(onGestureFinish)();}}\";\n      _f.__workletHash = 10753070071248;\n      _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (176:14)\";\n      return _f;\n    }()\n  });\n  var translateX = useDerivedValue(function () {\n    var _f = function _f() {\n      var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n      var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n      return translateX;\n    };\n    _f._closure = {\n      drawerType: drawerType,\n      gestureState: gestureState,\n      GestureState: {\n        ACTIVE: GestureState.ACTIVE\n      },\n      minmax: minmax,\n      drawerPosition: drawerPosition,\n      touchStartX: touchStartX,\n      drawerWidth: drawerWidth,\n      dimensions: {\n        width: dimensions.width\n      },\n      translationX: translationX\n    };\n    _f.asString = \"function _f(){const{drawerType,gestureState,GestureState,minmax,drawerPosition,touchStartX,drawerWidth,dimensions,translationX}=jsThis._closure;{const touchDistance=drawerType==='front'&&gestureState.value===GestureState.ACTIVE?minmax(drawerPosition==='left'?touchStartX.value-drawerWidth:dimensions.width-drawerWidth-touchStartX.value,0,dimensions.width):0;const translateX=drawerPosition==='left'?minmax(translationX.value+touchDistance,-drawerWidth,0):minmax(translationX.value-touchDistance,0,drawerWidth);return translateX;}}\";\n    _f.__workletHash = 16881564590342;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (180:37)\";\n    return _f;\n  }());\n  var isRTL = I18nManager.getConstants().isRTL;\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var distanceFromEdge = dimensions.width - drawerWidth;\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n        }]\n      };\n    };\n    _f._closure = {\n      dimensions: {\n        width: dimensions.width\n      },\n      drawerWidth: drawerWidth,\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerPosition: drawerPosition,\n      isRTL: isRTL\n    };\n    _f.asString = \"function _f(){const{dimensions,drawerWidth,drawerType,translateX,drawerPosition,isRTL}=jsThis._closure;{const distanceFromEdge=dimensions.width-drawerWidth;return{transform:drawerType==='permanent'?[]:[{translateX:(drawerType==='back'?0:translateX.value)+(drawerPosition==='left'?isRTL?-distanceFromEdge:0:isRTL?0:distanceFromEdge)}]};}}\";\n    _f.__workletHash = 17545005580326;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (211:47)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: drawerType === 'permanent' ? [] : [{\n          translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n        }]\n      };\n    };\n    _f._closure = {\n      drawerType: drawerType,\n      translateX: translateX,\n      drawerWidth: drawerWidth,\n      drawerPosition: drawerPosition\n    };\n    _f.asString = \"function _f(){const{drawerType,translateX,drawerWidth,drawerPosition}=jsThis._closure;{return{transform:drawerType==='permanent'?[]:[{translateX:drawerType==='front'?0:translateX.value+drawerWidth*(drawerPosition==='left'?1:-1)}]};}}\";\n    _f.__workletHash = 10940802030343;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (224:48)\";\n    _f.__optimalization = 3;\n    return _f;\n  }());\n  var progress = useDerivedValue(function () {\n    var _f = function _f() {\n      return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n    };\n    _f._closure = {\n      drawerType: drawerType,\n      interpolate: interpolate,\n      translateX: translateX,\n      getDrawerTranslationX: getDrawerTranslationX\n    };\n    _f.asString = \"function _f(){const{drawerType,interpolate,translateX,getDrawerTranslationX}=jsThis._closure;{return drawerType==='permanent'?1:interpolate(translateX.value,[getDrawerTranslationX(false),getDrawerTranslationX(true)],[0,1]);}}\";\n    _f.__workletHash = 10677902672597;\n    _f.__location = \"E:\\\\Hitesh\\\\colorhunt-reactnative-frontend\\\\node_modules\\\\@react-navigation\\\\drawer\\\\lib\\\\module\\\\views\\\\modern\\\\Drawer.js (236:35)\";\n    return _f;\n  }());\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer({\n        open: false,\n        isUserInitiated: true\n      });\n    },\n    style: overlayStyle,\n    accessibilityLabel: overlayAccessibilityLabel\n  }) : null), React.createElement(Animated.View, {\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","PanGestureHandler","State","GestureState","Animated","interpolate","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useDerivedValue","useSharedValue","withSpring","DrawerProgressContext","Overlay","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","_f","value","start","end","Math","min","max","_closure","asString","__workletHash","__location","Drawer","_ref","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","overlayAccessibilityLabel","getDrawerWidth","_ref3","flatten","_ref3$width","width","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","useCallback","hideStatusBar","hide","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","dismiss","onGestureStart","onGestureFinish","hitSlop","right","undefined","left","touchStartX","touchX","translationX","gestureState","UNDETERMINED","toggleDrawer","_ref2","isUserInitiated","velocity","translateX","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","onGestureEvent","onStart","event","ctx","hasCalledOnStart","startX","state","x","onActive","onEnd","nextOpen","abs","velocityX","onFinish","touchDistance","ACTIVE","isRTL","getConstants","drawerAnimatedStyle","distanceFromEdge","transform","__optimalization","contentAnimatedStyle","progress","createElement","Provider","_extends","activeOffsetX","failOffsetY","enabled","style","styles","main","flexDirection","content","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityLabel","removeClippedSubviews","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","_objectSpread","select","web","default","overflow"],"sources":["E:\\Hitesh\\colorhunt-reactnative-frontend\\node_modules\\@react-navigation\\drawer\\src\\views\\modern\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  I18nManager,\r\n  InteractionManager,\r\n  Keyboard,\r\n  Platform,\r\n  StatusBar,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nimport {\r\n  PanGestureHandler,\r\n  PanGestureHandlerGestureEvent,\r\n  State as GestureState,\r\n} from 'react-native-gesture-handler';\r\nimport Animated, {\r\n  interpolate,\r\n  runOnJS,\r\n  useAnimatedGestureHandler,\r\n  useAnimatedStyle,\r\n  useDerivedValue,\r\n  useSharedValue,\r\n  withSpring,\r\n} from 'react-native-reanimated';\r\n\r\nimport type { DrawerProps } from '../../types';\r\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\r\nimport Overlay from './Overlay';\r\n\r\nconst SWIPE_DISTANCE_MINIMUM = 5;\r\nconst DEFAULT_DRAWER_WIDTH = '80%';\r\n\r\ntype ToggleOptions = {\r\n  open: boolean;\r\n  isUserInitiated: boolean;\r\n  velocity?: number;\r\n};\r\n\r\nconst minmax = (value: number, start: number, end: number) => {\r\n  'worklet';\r\n\r\n  return Math.min(Math.max(value, start), end);\r\n};\r\n\r\nexport default function Drawer({\r\n  dimensions,\r\n  drawerPosition,\r\n  drawerStyle,\r\n  drawerType,\r\n  gestureHandlerProps,\r\n  hideStatusBarOnOpen,\r\n  keyboardDismissMode,\r\n  onClose,\r\n  onOpen,\r\n  open,\r\n  overlayStyle,\r\n  renderDrawerContent,\r\n  renderSceneContent,\r\n  statusBarAnimation,\r\n  swipeDistanceThreshold,\r\n  swipeEdgeWidth,\r\n  swipeEnabled,\r\n  swipeVelocityThreshold,\r\n  overlayAccessibilityLabel,\r\n}: DrawerProps) {\r\n  const getDrawerWidth = (): number => {\r\n    const { width = DEFAULT_DRAWER_WIDTH } =\r\n      StyleSheet.flatten(drawerStyle) || {};\r\n\r\n    if (typeof width === 'string' && width.endsWith('%')) {\r\n      // Try to calculate width if a percentage is given\r\n      const percentage = Number(width.replace(/%$/, ''));\r\n\r\n      if (Number.isFinite(percentage)) {\r\n        return dimensions.width * (percentage / 100);\r\n      }\r\n    }\r\n\r\n    return typeof width === 'number' ? width : 0;\r\n  };\r\n\r\n  const drawerWidth = getDrawerWidth();\r\n\r\n  const isOpen = drawerType === 'permanent' ? true : open;\r\n  const isRight = drawerPosition === 'right';\r\n\r\n  const getDrawerTranslationX = React.useCallback(\r\n    (open: boolean) => {\r\n      'worklet';\r\n\r\n      if (drawerPosition === 'left') {\r\n        return open ? 0 : -drawerWidth;\r\n      }\r\n\r\n      return open ? 0 : drawerWidth;\r\n    },\r\n    [drawerPosition, drawerWidth]\r\n  );\r\n\r\n  const hideStatusBar = React.useCallback(\r\n    (hide: boolean) => {\r\n      if (hideStatusBarOnOpen) {\r\n        StatusBar.setHidden(hide, statusBarAnimation);\r\n      }\r\n    },\r\n    [hideStatusBarOnOpen, statusBarAnimation]\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    hideStatusBar(isOpen);\r\n\r\n    return () => hideStatusBar(false);\r\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\r\n\r\n  const interactionHandleRef = React.useRef<number | null>(null);\r\n\r\n  const startInteraction = () => {\r\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\r\n  };\r\n\r\n  const endInteraction = () => {\r\n    if (interactionHandleRef.current != null) {\r\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\r\n      interactionHandleRef.current = null;\r\n    }\r\n  };\r\n\r\n  const hideKeyboard = () => {\r\n    if (keyboardDismissMode === 'on-drag') {\r\n      Keyboard.dismiss();\r\n    }\r\n  };\r\n\r\n  const onGestureStart = () => {\r\n    startInteraction();\r\n    hideKeyboard();\r\n    hideStatusBar(true);\r\n  };\r\n\r\n  const onGestureFinish = () => {\r\n    endInteraction();\r\n  };\r\n\r\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\r\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\r\n  const hitSlop = isRight\r\n    ? // Extend hitSlop to the side of the screen when drawer is closed\r\n      // This lets the user drag the drawer from the side of the screen\r\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\r\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\r\n\r\n  const touchStartX = useSharedValue(0);\r\n  const touchX = useSharedValue(0);\r\n  const translationX = useSharedValue(getDrawerTranslationX(open));\r\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\r\n\r\n  const toggleDrawer = React.useCallback(\r\n    ({ open, isUserInitiated, velocity }: ToggleOptions) => {\r\n      'worklet';\r\n\r\n      const translateX = getDrawerTranslationX(open);\r\n\r\n      touchStartX.value = 0;\r\n      touchX.value = 0;\r\n      translationX.value = withSpring(translateX, {\r\n        velocity,\r\n        stiffness: 1000,\r\n        damping: 500,\r\n        mass: 3,\r\n        overshootClamping: true,\r\n        restDisplacementThreshold: 0.01,\r\n        restSpeedThreshold: 0.01,\r\n      });\r\n\r\n      if (!isUserInitiated) {\r\n        return;\r\n      }\r\n\r\n      if (open) {\r\n        runOnJS(onOpen)();\r\n      } else {\r\n        runOnJS(onClose)();\r\n      }\r\n    },\r\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\r\n  );\r\n\r\n  React.useEffect(\r\n    () => toggleDrawer({ open, isUserInitiated: false }),\r\n    [open, toggleDrawer]\r\n  );\r\n\r\n  const onGestureEvent = useAnimatedGestureHandler<\r\n    PanGestureHandlerGestureEvent,\r\n    { startX: number; hasCalledOnStart: boolean }\r\n  >({\r\n    onStart: (event, ctx) => {\r\n      ctx.hasCalledOnStart = false;\r\n      ctx.startX = translationX.value;\r\n      gestureState.value = event.state;\r\n      touchStartX.value = event.x;\r\n    },\r\n    onActive: (event, ctx) => {\r\n      touchX.value = event.x;\r\n      translationX.value = ctx.startX + event.translationX;\r\n      gestureState.value = event.state;\r\n\r\n      // onStart will _always_ be called, even when the activation\r\n      // criteria isn't met yet. This makes sure onGestureStart is only\r\n      // called when the criteria is really met.\r\n      if (!ctx.hasCalledOnStart) {\r\n        ctx.hasCalledOnStart = true;\r\n        runOnJS(onGestureStart)();\r\n      }\r\n    },\r\n    onEnd: (event) => {\r\n      gestureState.value = event.state;\r\n\r\n      const nextOpen =\r\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\r\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\r\n        Math.abs(event.translationX) > swipeDistanceThreshold\r\n          ? drawerPosition === 'left'\r\n            ? // If swiped to right, open the drawer, otherwise close it\r\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\r\n            : // If swiped to left, open the drawer, otherwise close it\r\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\r\n          : open;\r\n\r\n      toggleDrawer({\r\n        open: nextOpen,\r\n        isUserInitiated: true,\r\n        velocity: event.velocityX,\r\n      });\r\n    },\r\n    onFinish: () => {\r\n      runOnJS(onGestureFinish)();\r\n    },\r\n  });\r\n\r\n  const translateX = useDerivedValue(() => {\r\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\r\n    //\r\n    // While closing the drawer when user starts gesture outside of its area (in greyed\r\n    // out part of the window), we want the drawer to follow only once finger reaches the\r\n    // edge of the drawer.\r\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\r\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\r\n    // an arrow pointing left\r\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n    //    +---------------+    +---------------+    +---------------+    +---------------+\r\n    //\r\n    // For the above to work properly we define animated value that will keep start position\r\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\r\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\r\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\r\n    // drawer be pulled back as soon as you start the pan.\r\n    //\r\n    // This is used only when drawerType is \"front\"\r\n    const touchDistance =\r\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\r\n        ? minmax(\r\n            drawerPosition === 'left'\r\n              ? touchStartX.value - drawerWidth\r\n              : dimensions.width - drawerWidth - touchStartX.value,\r\n            0,\r\n            dimensions.width\r\n          )\r\n        : 0;\r\n\r\n    const translateX =\r\n      drawerPosition === 'left'\r\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\r\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\r\n\r\n    return translateX;\r\n  });\r\n\r\n  const isRTL = I18nManager.getConstants().isRTL;\r\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\r\n    const distanceFromEdge = dimensions.width - drawerWidth;\r\n\r\n    return {\r\n      transform:\r\n        drawerType === 'permanent'\r\n          ? // Reanimated needs the property to be present, but it results in Browser bug\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n            []\r\n          : [\r\n              {\r\n                translateX:\r\n                  // The drawer stays in place when `drawerType` is `back`\r\n                  (drawerType === 'back' ? 0 : translateX.value) +\r\n                  (drawerPosition === 'left'\r\n                    ? isRTL\r\n                      ? -distanceFromEdge\r\n                      : 0\r\n                    : isRTL\r\n                    ? 0\r\n                    : distanceFromEdge),\r\n              },\r\n            ],\r\n    };\r\n  });\r\n\r\n  const contentAnimatedStyle = useAnimatedStyle(() => {\r\n    return {\r\n      transform:\r\n        drawerType === 'permanent'\r\n          ? // Reanimated needs the property to be present, but it results in Browser bug\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n            []\r\n          : [\r\n              {\r\n                translateX:\r\n                  // The screen content stays in place when `drawerType` is `front`\r\n                  drawerType === 'front'\r\n                    ? 0\r\n                    : translateX.value +\r\n                      drawerWidth * (drawerPosition === 'left' ? 1 : -1),\r\n              },\r\n            ],\r\n    };\r\n  });\r\n\r\n  const progress = useDerivedValue(() => {\r\n    return drawerType === 'permanent'\r\n      ? 1\r\n      : interpolate(\r\n          translateX.value,\r\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\r\n          [0, 1]\r\n        );\r\n  });\r\n\r\n  return (\r\n    <DrawerProgressContext.Provider value={progress}>\r\n      <PanGestureHandler\r\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n        hitSlop={hitSlop}\r\n        enabled={drawerType !== 'permanent' && swipeEnabled}\r\n        onGestureEvent={onGestureEvent}\r\n        {...gestureHandlerProps}\r\n      >\r\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\r\n        <Animated.View\r\n          style={[\r\n            styles.main,\r\n            {\r\n              flexDirection:\r\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\r\n            },\r\n          ]}\r\n        >\r\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\r\n            <View\r\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\r\n              importantForAccessibility={\r\n                isOpen && drawerType !== 'permanent'\r\n                  ? 'no-hide-descendants'\r\n                  : 'auto'\r\n              }\r\n              style={styles.content}\r\n            >\r\n              {renderSceneContent()}\r\n            </View>\r\n            {drawerType !== 'permanent' ? (\r\n              <Overlay\r\n                progress={progress}\r\n                onPress={() =>\r\n                  toggleDrawer({ open: false, isUserInitiated: true })\r\n                }\r\n                style={overlayStyle}\r\n                accessibilityLabel={overlayAccessibilityLabel}\r\n              />\r\n            ) : null}\r\n          </Animated.View>\r\n          <Animated.View\r\n            removeClippedSubviews={Platform.OS !== 'ios'}\r\n            style={[\r\n              styles.container,\r\n              {\r\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\r\n                zIndex: drawerType === 'back' ? -1 : 0,\r\n              },\r\n              drawerAnimatedStyle,\r\n              drawerStyle as any,\r\n            ]}\r\n          >\r\n            {renderDrawerContent()}\r\n          </Animated.View>\r\n        </Animated.View>\r\n      </PanGestureHandler>\r\n    </DrawerProgressContext.Provider>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    top: 0,\r\n    bottom: 0,\r\n    maxWidth: '100%',\r\n    width: DEFAULT_DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    ...Platform.select({\r\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\r\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\r\n      web: null,\r\n      default: { overflow: 'hidden' },\r\n    }),\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function FilterComponent(_ref) {\n  var categoriesData = _ref.categoriesData,\n      catagoryHandler = _ref.catagoryHandler,\n      clearFilters = _ref.clearFilters,\n      applyFilters = _ref.applyFilters;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedCategory = _useState2[0],\n      setSelectedCategory = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterText = _useState4[0],\n      setFilterText = _useState4[1];\n\n  var handleCategorySelect = function handleCategorySelect(category) {\n    setSelectedCategory(category);\n    catagoryHandler(category);\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Filter by category...\",\n      value: filterText,\n      onChangeText: function onChangeText(text) {\n        return setFilterText(text);\n      },\n      style: {\n        borderBottomWidth: 1,\n        borderColor: \"gray\",\n        marginBottom: 10\n      }\n    }), categoriesData.filter(function (category) {\n      return filterText ? category.Category.toLowerCase().includes(filterText.toLowerCase()) : true;\n    }).map(function (category) {\n      return _jsxs(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleCategorySelect(category.Category);\n        },\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          marginVertical: 5\n        },\n        children: [_jsx(View, {\n          style: {\n            width: 20,\n            height: 20,\n            borderRadius: 10,\n            borderWidth: 2,\n            borderColor: selectedCategory === category.Category ? \"blue\" : \"gray\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            marginRight: 10\n          },\n          children: selectedCategory === category.Category && _jsx(View, {\n            style: {\n              width: 12,\n              height: 12,\n              borderRadius: 6,\n              backgroundColor: \"blue\"\n            }\n          })\n        }), _jsx(Text, {\n          children: category.Category\n        })]\n      }, category.id);\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return setSelectedCategory(null);\n      },\n      children: _jsx(Text, {\n        children: \"Reset\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: applyFilters,\n      children: _jsx(Text, {\n        children: \"Apply\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","FilterComponent","categoriesData","catagoryHandler","clearFilters","applyFilters","selectedCategory","setSelectedCategory","filterText","setFilterText","handleCategorySelect","category","text","borderBottomWidth","borderColor","marginBottom","filter","Category","toLowerCase","includes","map","flexDirection","alignItems","marginVertical","width","height","borderRadius","borderWidth","justifyContent","marginRight","backgroundColor","id"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/src/components/Fliter/Filter.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, TouchableOpacity, TextInput } from \"react-native\";\r\n\r\nexport default function FilterComponent({ categoriesData, catagoryHandler, clearFilters, applyFilters }) {\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [filterText, setFilterText] = useState(\"\");\r\n\r\n  const handleCategorySelect = (category) => {\r\n    setSelectedCategory(category);\r\n    catagoryHandler(category);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <TextInput\r\n        placeholder=\"Filter by category...\"\r\n        value={filterText}\r\n        onChangeText={(text) => setFilterText(text)}\r\n        style={{\r\n          borderBottomWidth: 1,\r\n          borderColor: \"gray\",\r\n          marginBottom: 10,\r\n        }}\r\n      />\r\n\r\n      {categoriesData\r\n        .filter((category) =>\r\n          filterText ? category.Category.toLowerCase().includes(filterText.toLowerCase()) : true\r\n        )\r\n        .map((category) => (\r\n          <TouchableOpacity\r\n            key={category.id}\r\n            onPress={() => handleCategorySelect(category.Category)}\r\n            style={{\r\n              flexDirection: \"row\",\r\n              alignItems: \"center\",\r\n              marginVertical: 5,\r\n            }}\r\n          >\r\n            <View\r\n              style={{\r\n                width: 20,\r\n                height: 20,\r\n                borderRadius: 10,\r\n                borderWidth: 2,\r\n                borderColor: selectedCategory === category.Category ? \"blue\" : \"gray\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                marginRight: 10,\r\n              }}\r\n            >\r\n              {selectedCategory === category.Category && (\r\n                <View\r\n                  style={{\r\n                    width: 12,\r\n                    height: 12,\r\n                    borderRadius: 6,\r\n                    backgroundColor: \"blue\",\r\n                  }}\r\n                />\r\n              )}\r\n            </View>\r\n            <Text>{category.Category}</Text>\r\n          </TouchableOpacity>\r\n        ))}\r\n\r\n      <TouchableOpacity onPress={() => setSelectedCategory(null)}>\r\n        <Text>Reset</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={applyFilters}>\r\n        <Text>Apply</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;AAGA,eAAe,SAASC,eAAT,OAA0F;EAAA,IAA/DC,cAA+D,QAA/DA,cAA+D;EAAA,IAA/CC,eAA+C,QAA/CA,eAA+C;EAAA,IAA9BC,YAA8B,QAA9BA,YAA8B;EAAA,IAAhBC,YAAgB,QAAhBA,YAAgB;;EACvG,gBAAgDL,QAAQ,CAAC,IAAD,CAAxD;EAAA;EAAA,IAAOM,gBAAP;EAAA,IAAyBC,mBAAzB;;EACA,iBAAoCP,QAAQ,CAAC,EAAD,CAA5C;EAAA;EAAA,IAAOQ,UAAP;EAAA,IAAmBC,aAAnB;;EAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD,EAAc;IACzCJ,mBAAmB,CAACI,QAAD,CAAnB;IACAR,eAAe,CAACQ,QAAD,CAAf;EACD,CAHD;;EAKA,OACE,MAAC,IAAD;IAAA,WACE,KAAC,SAAD;MACE,WAAW,EAAC,uBADd;MAEE,KAAK,EAAEH,UAFT;MAGE,YAAY,EAAE,sBAACI,IAAD;QAAA,OAAUH,aAAa,CAACG,IAAD,CAAvB;MAAA,CAHhB;MAIE,KAAK,EAAE;QACLC,iBAAiB,EAAE,CADd;QAELC,WAAW,EAAE,MAFR;QAGLC,YAAY,EAAE;MAHT;IAJT,EADF,EAYGb,cAAc,CACZc,MADF,CACS,UAACL,QAAD;MAAA,OACNH,UAAU,GAAGG,QAAQ,CAACM,QAAT,CAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCX,UAAU,CAACU,WAAX,EAAzC,CAAH,GAAwE,IAD5E;IAAA,CADT,EAIEE,GAJF,CAIM,UAACT,QAAD;MAAA,OACH,MAAC,gBAAD;QAEE,OAAO,EAAE;UAAA,OAAMD,oBAAoB,CAACC,QAAQ,CAACM,QAAV,CAA1B;QAAA,CAFX;QAGE,KAAK,EAAE;UACLI,aAAa,EAAE,KADV;UAELC,UAAU,EAAE,QAFP;UAGLC,cAAc,EAAE;QAHX,CAHT;QAAA,WASE,KAAC,IAAD;UACE,KAAK,EAAE;YACLC,KAAK,EAAE,EADF;YAELC,MAAM,EAAE,EAFH;YAGLC,YAAY,EAAE,EAHT;YAILC,WAAW,EAAE,CAJR;YAKLb,WAAW,EAAER,gBAAgB,KAAKK,QAAQ,CAACM,QAA9B,GAAyC,MAAzC,GAAkD,MAL1D;YAMLW,cAAc,EAAE,QANX;YAOLN,UAAU,EAAE,QAPP;YAQLO,WAAW,EAAE;UARR,CADT;UAAA,UAYGvB,gBAAgB,KAAKK,QAAQ,CAACM,QAA9B,IACC,KAAC,IAAD;YACE,KAAK,EAAE;cACLO,KAAK,EAAE,EADF;cAELC,MAAM,EAAE,EAFH;cAGLC,YAAY,EAAE,CAHT;cAILI,eAAe,EAAE;YAJZ;UADT;QAbJ,EATF,EAgCE,KAAC,IAAD;UAAA,UAAOnB,QAAQ,CAACM;QAAhB,EAhCF;MAAA,GACON,QAAQ,CAACoB,EADhB,CADG;IAAA,CAJN,CAZH,EAqDE,KAAC,gBAAD;MAAkB,OAAO,EAAE;QAAA,OAAMxB,mBAAmB,CAAC,IAAD,CAAzB;MAAA,CAA3B;MAAA,UACE,KAAC,IAAD;QAAA,UAAM;MAAN;IADF,EArDF,EAwDE,KAAC,gBAAD;MAAkB,OAAO,EAAEF,YAA3B;MAAA,UACE,KAAC,IAAD;QAAA,UAAM;MAAN;IADF,EAxDF;EAAA,EADF;AA8DD"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Platform } from 'expo-modules-core';\nimport { getFilename } from \"./AssetUris\";\nexport function isImageType(type) {\n  return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);\n}\nexport function getImageInfoAsync(url) {\n  if (!Platform.isDOMAvailable) {\n    return Promise.resolve({\n      name: getFilename(url),\n      width: 0,\n      height: 0\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.onerror = reject;\n\n    img.onload = function () {\n      resolve({\n        name: getFilename(url),\n        width: img.naturalWidth,\n        height: img.naturalHeight\n      });\n    };\n\n    img.src = url;\n  });\n}","map":{"version":3,"sources":["../src/ImageAssets.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,SAAS,WAAT;AAQA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAAkC;EACtC,OAAO,sCAAsC,IAAtC,CAA2C,IAA3C,CAAP;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,GAA5B,EAAuC;EAC3C,IAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B;IAC5B,OAAO,OAAO,CAAC,OAAR,CAAgB;MAAE,IAAI,EAAE,WAAW,CAAC,GAAD,CAAnB;MAA0B,KAAK,EAAE,CAAjC;MAAoC,MAAM,EAAE;IAA5C,CAAhB,CAAP;EACD;;EACD,OAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;IACrC,IAAM,GAAG,GAAG,IAAI,KAAJ,EAAZ;IACA,GAAG,CAAC,OAAJ,GAAc,MAAd;;IACA,GAAG,CAAC,MAAJ,GAAa,YAAK;MAChB,OAAO,CAAC;QACN,IAAI,EAAE,WAAW,CAAC,GAAD,CADX;QAEN,KAAK,EAAE,GAAG,CAAC,YAFL;QAGN,MAAM,EAAE,GAAG,CAAC;MAHN,CAAD,CAAP;IAKD,CAND;;IAOA,GAAG,CAAC,GAAJ,GAAU,GAAV;EACD,CAXM,CAAP;AAYD","sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\n\nimport { getFilename } from './AssetUris';\n\ntype ImageInfo = {\n  name: string;\n  width: number;\n  height: number;\n};\n\nexport function isImageType(type: string): boolean {\n  return /^(jpeg|jpg|gif|png|bmp|webp|heic)$/i.test(type);\n}\n\nexport function getImageInfoAsync(url: string): Promise<ImageInfo> {\n  if (!Platform.isDOMAvailable) {\n    return Promise.resolve({ name: getFilename(url), width: 0, height: 0 });\n  }\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onerror = reject;\n    img.onload = () => {\n      resolve({\n        name: getFilename(url),\n        width: img.naturalWidth,\n        height: img.naturalHeight,\n      });\n    };\n    img.src = url;\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
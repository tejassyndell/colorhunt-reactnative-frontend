{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _getInstallationIdAsync, _getRegistrationInfoAsync, _setRegistrationInfoAsync;\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\nexport default {\n  getInstallationIdAsync: function getInstallationIdAsync() {\n    return (_getInstallationIdAsync = _getInstallationIdAsync || _asyncToGenerator(function* () {\n      var installationId;\n      try {\n        installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n        if (!installationId || typeof installationId !== 'string') {\n          installationId = uuidv4();\n          localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n        }\n      } catch (_unused) {\n        installationId = _getFallbackInstallationId();\n      }\n      return installationId;\n    })).apply(this, arguments);\n  },\n  getRegistrationInfoAsync: function getRegistrationInfoAsync() {\n    return (_getRegistrationInfoAsync = _getRegistrationInfoAsync || _asyncToGenerator(function* () {\n      return localStorage.getItem(REGISTRATION_INFO_KEY);\n    })).apply(this, arguments);\n  },\n  setRegistrationInfoAsync: function setRegistrationInfoAsync(_x) {\n    return (_setRegistrationInfoAsync = _setRegistrationInfoAsync || _asyncToGenerator(function* (registrationInfo) {\n      try {\n        if (registrationInfo) {\n          localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n        } else {\n          localStorage.removeItem(REGISTRATION_INFO_KEY);\n        }\n      } catch (error) {\n        throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + error);\n      }\n    })).apply(this, arguments);\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"names":["CodedError","v4","uuidv4","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","getInstallationIdAsync","_getInstallationIdAsync","_asyncToGenerator","installationId","localStorage","getItem","setItem","_unused","apply","arguments","getRegistrationInfoAsync","_getRegistrationInfoAsync","setRegistrationInfoAsync","_x","_setRegistrationInfoAsync","registrationInfo","removeItem","error","addListener","removeListeners"],"sources":["/Users/syndell-068/Documents/GitHub/colorhunt-reactnative-frontend/node_modules/expo-notifications/src/ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAInC,IAAMC,mBAAmB,GAAG,oCAAoC;AAChE,IAAMC,qBAAqB,GAAG,sCAAsC;AAGpE,IAAIC,0BAAyB,GAAG,SAAAA,0BAAA,EAAK;EACnC,IAAMC,qBAAqB,GAAGJ,MAAM,EAAE;EACtCG,0BAAyB,GAAG,SAAAA,0BAAA;IAAA,OAAMC,qBAAqB;EAAA;AACzD,CAAC;AAED,eAAe;EACbC,sBAAsB,WAAAA,uBAAA;IAAA,QAAAC,uBAAA,GAAAA,uBAAA,IAAAC,iBAAA,CAAE,aAAW;MACjC,IAAIC,cAAc;MAElB,IAAI;QACFA,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACT,mBAAmB,CAAC;QAC1D,IAAI,CAACO,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;UACzDA,cAAc,GAAGR,MAAM,EAAE;UACzBS,YAAY,CAACE,OAAO,CAACV,mBAAmB,EAAEO,cAAc,CAAC;;OAE5D,CAAC,OAAAI,OAAA,EAAM;QACNJ,cAAc,GAAGL,0BAAyB,EAAE;;MAG9C,OAAOK,cAAc;IACvB,CAAC,GAAAK,KAAA,OAAAC,SAAA;EAAA;EACDC,wBAAwB,WAAAA,yBAAA;IAAA,QAAAC,yBAAA,GAAAA,yBAAA,IAAAT,iBAAA,CAAE,aAAW;MACnC,OAAOE,YAAY,CAACC,OAAO,CAACR,qBAAqB,CAAC;IACpD,CAAC,GAAAW,KAAA,OAAAC,SAAA;EAAA;EACDG,wBAAwB,WAAAA,yBAAAC,EAAA;IAAA,QAAAC,yBAAA,GAAAA,yBAAA,IAAAZ,iBAAA,CAAE,WAAOa,gBAA+B,EAAI;MAClE,IAAI;QACF,IAAIA,gBAAgB,EAAE;UACpBX,YAAY,CAACE,OAAO,CAACT,qBAAqB,EAAEkB,gBAAgB,CAAC;SAC9D,MAAM;UACLX,YAAY,CAACY,UAAU,CAACnB,qBAAqB,CAAC;;OAEjD,CAAC,OAAOoB,KAAK,EAAE;QACd,MAAM,IAAIxB,UAAU,CAClB,iCAAiC,+EAC0CwB,KAAO,CACnF;;IAEL,CAAC,GAAAT,KAAA,OAAAC,SAAA;EAAA;EAEDS,WAAW,EAAE,SAAAA,YAAA,EAAK,CAAE,CAAC;EACrBC,eAAe,EAAE,SAAAA,gBAAA,EAAK,CAAE;CACG"},"metadata":{},"sourceType":"module","externalDependencies":[]}
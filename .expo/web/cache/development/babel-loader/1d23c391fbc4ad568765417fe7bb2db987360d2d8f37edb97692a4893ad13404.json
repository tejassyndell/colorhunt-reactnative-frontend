{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useEffect, useState } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport axios from 'axios';\nimport PushNotification from 'react-native-push-notification';\nimport * as Notifications from 'expo-notifications';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    Token = _useState2[0],\n    setToken = _useState2[1];\n  useEffect(function () {\n    var channelOptions = {\n      name: 'Colorhunt app',\n      description: 'test',\n      priority: Notifications.AndroidNotificationPriority.HIGH,\n      sound: true,\n      vibrate: true\n    };\n    Notifications.setNotificationChannelAsync('colorhunt', channelOptions).then(function () {\n      console.log('Notification channel created');\n    }).catch(function (error) {\n      console.error('Error creating notification channel:', error);\n    });\n    Notifications.getNotificationChannelAsync('colorhunt').then(function (channel) {\n      if (channel) {} else {\n        console.log('Channel not found');\n      }\n    }).catch(function (error) {\n      console.error('Error retrieving channel info:', error);\n    });\n  }, []);\n  var getNotification = function () {\n    var _ref = _asyncToGenerator(function* (registrationToken) {\n      var registrationTokens = [registrationToken];\n      try {\n        var token = {\n          registrationToken: registrationTokens\n        };\n        var result = yield axios.post(\"http://10.0.2.2:8020/getNotification\", token);\n      } catch (err) {\n        console.log(\"Error in axios\");\n      }\n    });\n    return function getNotification(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var requestUserPermission = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var authStatus = yield messaging().requestPermission();\n      var enabled = authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n      if (enabled) {\n        console.log('Authorization status:', authStatus);\n      }\n    });\n    return function requestUserPermission() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var pushNotificationsss = function pushNotificationsss() {\n    if (requestUserPermission()) {\n      messaging().getToken().then(function (token) {\n        setToken(token);\n        getNotification(token);\n      });\n    } else {\n      console.log(\"failed token status\", authStatus);\n    }\n    messaging().getInitialNotification().then(function () {\n      var _ref3 = _asyncToGenerator(function* (remoteMessage) {\n        if (remoteMessage) {\n          console.log('Notification caused app to open from quit state:', remoteMessage.notification);\n        }\n      });\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    messaging().onNotificationOpenedApp(function () {\n      var _ref4 = _asyncToGenerator(function* (remoteMessage) {\n        console.log('Notification caused app to open from background state:', remoteMessage.notification);\n      });\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    messaging().setBackgroundMessageHandler(function () {\n      var _ref5 = _asyncToGenerator(function* (remoteMessage) {\n        console.log('Message handled in the background!', remoteMessage);\n      });\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    var unsubscribe = messaging().onMessage(function () {\n      var _ref6 = _asyncToGenerator(function* (remoteMessage) {\n        PushNotification.localNotification({\n          channelId: 'colorhunt',\n          title: remoteMessage.notification.title,\n          message: remoteMessage.notification.body,\n          largeIcon: 'large_icon_url'\n        });\n      });\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n    return unsubscribe;\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: {\n        fontSize: 30,\n        fontWeight: 'bold'\n      }\n    }), _jsx(Button, {\n      title: \"Click Me\",\n      onPress: pushNotificationsss\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","Alert","Button","React","useEffect","useState","messaging","axios","PushNotification","Notifications","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","Token","setToken","channelOptions","name","description","priority","AndroidNotificationPriority","HIGH","sound","vibrate","setNotificationChannelAsync","then","console","log","catch","error","getNotificationChannelAsync","channel","getNotification","_ref","_asyncToGenerator","registrationToken","registrationTokens","token","result","post","err","_x","apply","arguments","requestUserPermission","_ref2","authStatus","requestPermission","enabled","AuthorizationStatus","AUTHORIZED","PROVISIONAL","pushNotificationsss","getToken","getInitialNotification","_ref3","remoteMessage","notification","_x2","onNotificationOpenedApp","_ref4","_x3","setBackgroundMessageHandler","_ref5","_x4","unsubscribe","onMessage","_ref6","localNotification","channelId","title","message","body","largeIcon","_x5","style","styles","container","children","fontSize","fontWeight","onPress","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["D:/Rohit Project task/colorhunt-reactnative-frontend/src/screens/Notification/Notification.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, View, Alert,Button } from 'react-native';\r\nimport React, { useEffect, useState } from 'react';\r\nimport messaging from '@react-native-firebase/messaging';\r\nimport axios from 'axios';\r\nimport PushNotification from 'react-native-push-notification';\r\nimport * as Notifications from 'expo-notifications';\r\n\r\nexport default function App() {\r\n  const [Token,setToken] = useState()\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // Define channel options\r\n    const channelOptions = {\r\n      name: 'Colorhunt app', // Descriptive name\r\n      description: 'test', // Description\r\n      priority: Notifications.AndroidNotificationPriority.HIGH, // High priority\r\n      sound: true, // Enable sound\r\n      vibrate: true, // Enable vibration\r\n    };\r\n\r\n    // Create the notification channel\r\n    Notifications.setNotificationChannelAsync('colorhunt', channelOptions)\r\n      .then(() => {\r\n        console.log('Notification channel created');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error creating notification channel:', error);\r\n      });\r\n\r\n    // Retrieve channel information\r\n    Notifications.getNotificationChannelAsync('colorhunt')\r\n      .then((channel) => {\r\n        if (channel) {\r\n        \r\n        } else {\r\n          console.log('Channel not found');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error retrieving channel info:', error);\r\n      });\r\n  }, []);\r\n\r\n  // Function to send notifications using a list of registration tokens\r\n  const getNotification = async (registrationToken) => {\r\n    const registrationTokens = [registrationToken];\r\n\r\n    try {\r\n        const token = {\r\n            registrationToken: registrationTokens,\r\n        };\r\n        // console.log(token);\r\n        const result = await axios.post(`http://10.0.2.2:8020/getNotification`, token);\r\n    } catch (err) {\r\n        console.log(\"Error in axios\");\r\n    }\r\n};\r\n\r\n  const requestUserPermission = async () => {\r\n    const authStatus = await messaging().requestPermission();\r\n    const enabled =\r\n      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\r\n      authStatus === messaging.AuthorizationStatus.PROVISIONAL;\r\n\r\n    if (enabled) {\r\n      console.log('Authorization status:', authStatus);\r\n    }\r\n  }\r\n  const pushNotificationsss = () =>{\r\n\r\n    if (requestUserPermission()) {\r\n          messaging().getToken().then(token => {\r\n            setToken(token)\r\n            getNotification(token)\r\n          })\r\n        }\r\n        else {\r\n          console.log(\"failed token status\", authStatus);\r\n        }\r\n    \r\n        // Check whether an initial notification is available\r\n        messaging()\r\n          .getInitialNotification()\r\n          .then(async (remoteMessage) => {\r\n            if (remoteMessage) {\r\n              console.log(\r\n                'Notification caused app to open from quit state:',\r\n                remoteMessage.notification,\r\n              );\r\n            }\r\n          });\r\n        // Assume a message-notification contains a \"type\" property in the data payload of the screen to open\r\n    \r\n        messaging().onNotificationOpenedApp(async (remoteMessage) => {\r\n          console.log(\r\n            'Notification caused app to open from background state:',\r\n            remoteMessage.notification,\r\n          );\r\n        });\r\n         // Register background handler\r\n         messaging().setBackgroundMessageHandler(async remoteMessage => {\r\n          console.log('Message handled in the background!', remoteMessage);\r\n        });\r\n     // Listen for incoming FCM messages\r\n    const unsubscribe = messaging().onMessage(async remoteMessage => {\r\n      // Display the notification using PushNotification\r\n      PushNotification.localNotification({\r\n        channelId:'colorhunt',\r\n        title: remoteMessage.notification.title,\r\n        message: remoteMessage.notification.body,\r\n        largeIcon: 'large_icon_url',\r\n      });\r\n    });\r\n        \r\n    \r\n        return unsubscribe;\r\n  }\r\n \r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={{fontSize:30,fontWeight:'bold'}}></Text>\r\n      <Button title=\"Click Me\" onPress={pushNotificationsss} />\r\n      <StatusBar style=\"auto\" />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,MAAA;AAE5C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAO,KAAKC,aAAa,MAAM,oBAAoB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpD,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAyBV,QAAQ,CAAC,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5BG,KAAK,GAAAF,UAAA;IAACG,QAAQ,GAAAH,UAAA;EAKrBZ,SAAS,CAAC,YAAM;IAEd,IAAMgB,cAAc,GAAG;MACrBC,IAAI,EAAE,eAAe;MACrBC,WAAW,EAAE,MAAM;MACnBC,QAAQ,EAAEd,aAAa,CAACe,2BAA2B,CAACC,IAAI;MACxDC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE;IACX,CAAC;IAGDlB,aAAa,CAACmB,2BAA2B,CAAC,WAAW,EAAER,cAAc,CAAC,CACnES,IAAI,CAAC,YAAM;MACVC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC,CAAC,CACDC,KAAK,CAAC,UAACC,KAAK,EAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CAAC;IAGJxB,aAAa,CAACyB,2BAA2B,CAAC,WAAW,CAAC,CACnDL,IAAI,CAAC,UAACM,OAAO,EAAK;MACjB,IAAIA,OAAO,EAAE,CAEb,CAAC,MAAM;QACLL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAClC;IACF,CAAC,CAAC,CACDC,KAAK,CAAC,UAACC,KAAK,EAAK;MAChBH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMG,eAAe;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,iBAAiB,EAAK;MACnD,IAAMC,kBAAkB,GAAG,CAACD,iBAAiB,CAAC;MAE9C,IAAI;QACA,IAAME,KAAK,GAAG;UACVF,iBAAiB,EAAEC;QACvB,CAAC;QAED,IAAME,MAAM,SAASnC,KAAK,CAACoC,IAAI,yCAAyCF,KAAK,CAAC;MAClF,CAAC,CAAC,OAAOG,GAAG,EAAE;QACVd,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MACjC;IACJ,CAAC;IAAA,gBAZOK,eAAeA,CAAAS,EAAA;MAAA,OAAAR,IAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAYtB;EAEC,IAAMC,qBAAqB;IAAA,IAAAC,KAAA,GAAAX,iBAAA,CAAG,aAAY;MACxC,IAAMY,UAAU,SAAS5C,SAAS,CAAC,CAAC,CAAC6C,iBAAiB,CAAC,CAAC;MACxD,IAAMC,OAAO,GACXF,UAAU,KAAK5C,SAAS,CAAC+C,mBAAmB,CAACC,UAAU,IACvDJ,UAAU,KAAK5C,SAAS,CAAC+C,mBAAmB,CAACE,WAAW;MAE1D,IAAIH,OAAO,EAAE;QACXtB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEmB,UAAU,CAAC;MAClD;IACF,CAAC;IAAA,gBATKF,qBAAqBA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GAS1B;EACD,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAQ;IAE/B,IAAIR,qBAAqB,CAAC,CAAC,EAAE;MACvB1C,SAAS,CAAC,CAAC,CAACmD,QAAQ,CAAC,CAAC,CAAC5B,IAAI,CAAC,UAAAY,KAAK,EAAI;QACnCtB,QAAQ,CAACsB,KAAK,CAAC;QACfL,eAAe,CAACK,KAAK,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,MACI;MACHX,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEmB,UAAU,CAAC;IAChD;IAGA5C,SAAS,CAAC,CAAC,CACRoD,sBAAsB,CAAC,CAAC,CACxB7B,IAAI;MAAA,IAAA8B,KAAA,GAAArB,iBAAA,CAAC,WAAOsB,aAAa,EAAK;QAC7B,IAAIA,aAAa,EAAE;UACjB9B,OAAO,CAACC,GAAG,CACT,kDAAkD,EAClD6B,aAAa,CAACC,YAChB,CAAC;QACH;MACF,CAAC;MAAA,iBAAAC,GAAA;QAAA,OAAAH,KAAA,CAAAb,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;IAGJzC,SAAS,CAAC,CAAC,CAACyD,uBAAuB;MAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAC,WAAOsB,aAAa,EAAK;QAC3D9B,OAAO,CAACC,GAAG,CACT,wDAAwD,EACxD6B,aAAa,CAACC,YAChB,CAAC;MACH,CAAC;MAAA,iBAAAI,GAAA;QAAA,OAAAD,KAAA,CAAAlB,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;IAEDzC,SAAS,CAAC,CAAC,CAAC4D,2BAA2B;MAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAC,WAAMsB,aAAa,EAAI;QAC9D9B,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE6B,aAAa,CAAC;MAClE,CAAC;MAAA,iBAAAQ,GAAA;QAAA,OAAAD,KAAA,CAAArB,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;IAEN,IAAMsB,WAAW,GAAG/D,SAAS,CAAC,CAAC,CAACgE,SAAS;MAAA,IAAAC,KAAA,GAAAjC,iBAAA,CAAC,WAAMsB,aAAa,EAAI;QAE/DpD,gBAAgB,CAACgE,iBAAiB,CAAC;UACjCC,SAAS,EAAC,WAAW;UACrBC,KAAK,EAAEd,aAAa,CAACC,YAAY,CAACa,KAAK;UACvCC,OAAO,EAAEf,aAAa,CAACC,YAAY,CAACe,IAAI;UACxCC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ,CAAC;MAAA,iBAAAC,GAAA;QAAA,OAAAP,KAAA,CAAAzB,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;IAGE,OAAOsB,WAAW;EACxB,CAAC;EAED,OACExD,KAAA,CAACb,IAAI;IAAC+E,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BvE,IAAA,CAACZ,IAAI;MAACgF,KAAK,EAAE;QAACI,QAAQ,EAAC,EAAE;QAACC,UAAU,EAAC;MAAM;IAAE,CAAO,CAAC,EACrDzE,IAAA,CAACT,MAAM;MAACwE,KAAK,EAAC,UAAU;MAACW,OAAO,EAAE7B;IAAoB,CAAE,CAAC,EACzD7C,IAAA,CAACd,SAAS;MAACkF,KAAK,EAAC;IAAM,CAAE,CAAC;EAAA,CACtB,CAAC;AAEX;AAEA,IAAMC,MAAM,GAAGlF,UAAU,CAACwF,MAAM,CAAC;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _setBadgeCountAsync;\nimport { UnavailabilityError, Platform } from 'expo-modules-core';\nimport BadgeModule from \"./BadgeModule\";\nexport default function setBadgeCountAsync(_x, _x2) {\n  return (_setBadgeCountAsync = _setBadgeCountAsync || _asyncToGenerator(function* (badgeCount, options) {\n    if (!BadgeModule.setBadgeCountAsync) {\n      throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n    }\n    return yield BadgeModule.setBadgeCountAsync(badgeCount, options == null ? void 0 : options[Platform.OS]);\n  })).apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","Platform","BadgeModule","setBadgeCountAsync","_x","_x2","_setBadgeCountAsync","_asyncToGenerator","badgeCount","options","OS","apply","arguments"],"sources":["/Users/syndell-068/Documents/GitHub/colorhunt-reactnative-frontend/node_modules/expo-notifications/src/setBadgeCountAsync.ts"],"sourcesContent":["import { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport BadgeModule from './BadgeModule';\nimport { WebSetBadgeCountOptions } from './BadgeModule.types';\n\nexport interface SetBadgeCountOptions {\n  /**\n   * A configuration object described [in the `badgin` documentation](https://github.com/jaulz/badgin#options).\n   */\n  web?: WebSetBadgeCountOptions;\n}\n\n/**\n * Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested\n * the user's permission for `allowBadge` via [`requestPermissionsAsync`](#notificationsrequestpermissionsasyncpermissions),\n * otherwise it will automatically return `false`.\n * > **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.\n * @param badgeCount The count which should appear on the badge. A value of `0` will clear the badge.\n * @param options An object of options configuring behavior applied in Web environment.\n * @return It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.\n * @header badge\n */\nexport default async function setBadgeCountAsync(\n  badgeCount: number,\n  options?: SetBadgeCountOptions\n): Promise<boolean> {\n  if (!BadgeModule.setBadgeCountAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n  }\n\n  return await BadgeModule.setBadgeCountAsync(badgeCount, options?.[Platform.OS]);\n}\n"],"mappings":";;AAAA,SAASA,mBAAmB,EAAEC,QAAQ,QAAQ,mBAAmB;AAEjE,OAAOC,WAAW;AAoBlB,wBAA8BC,kBAAkBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,QAAAC,mBAAA,GAAAA,mBAAA,IAAAC,iBAAA,CAAjC,WACbC,UAAkB,EAClBC,OAA8B;IAE9B,IAAI,CAACP,WAAW,CAACC,kBAAkB,EAAE;MACnC,MAAM,IAAIH,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC;;IAG1E,aAAaE,WAAW,CAACC,kBAAkB,CAACK,UAAU,EAAEC,OAAO,oBAAPA,OAAO,CAAGR,QAAQ,CAACS,EAAE,CAAC,CAAC;EACjF,CAAC,GAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
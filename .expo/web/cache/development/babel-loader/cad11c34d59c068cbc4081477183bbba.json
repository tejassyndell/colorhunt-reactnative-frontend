{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport AnimatedInterpolation from \"./AnimatedInterpolation\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\n\nvar AnimatedDiffClamp = function (_AnimatedWithChildren) {\n  _inherits(AnimatedDiffClamp, _AnimatedWithChildren);\n\n  var _super = _createSuper(AnimatedDiffClamp);\n\n  function AnimatedDiffClamp(a, min, max) {\n    var _this;\n\n    _classCallCheck(this, AnimatedDiffClamp);\n\n    _this = _super.call(this);\n    _this._a = a;\n    _this._min = min;\n    _this._max = max;\n    _this._value = _this._lastValue = _this._a.__getValue();\n    return _this;\n  }\n\n  _createClass(AnimatedDiffClamp, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._a.__makeNative(platformConfig);\n\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var value = this._a.__getValue();\n\n      var diff = value - this._lastValue;\n      this._lastValue = value;\n      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n      return this._value;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._a.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._a.__removeChild(this);\n\n      _get(_getPrototypeOf(AnimatedDiffClamp.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      return {\n        type: 'diffclamp',\n        input: this._a.__getNativeTag(),\n        min: this._min,\n        max: this._max\n      };\n    }\n  }]);\n\n  return AnimatedDiffClamp;\n}(AnimatedWithChildren);\n\nexport default AnimatedDiffClamp;","map":{"version":3,"names":["AnimatedInterpolation","AnimatedWithChildren","AnimatedDiffClamp","a","min","max","_a","_min","_max","_value","_lastValue","__getValue","platformConfig","__makeNative","config","value","diff","Math","__addChild","__removeChild","type","input","__getNativeTag"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedDiffClamp.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nclass AnimatedDiffClamp extends AnimatedWithChildren {\n  constructor(a, min, max) {\n    super();\n    this._a = a;\n    this._min = min;\n    this._max = max;\n    this._value = this._lastValue = this._a.__getValue();\n  }\n  __makeNative(platformConfig) {\n    this._a.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  __getValue() {\n    var value = this._a.__getValue();\n    var diff = value - this._lastValue;\n    this._lastValue = value;\n    this._value = Math.min(Math.max(this._value + diff, this._min), this._max);\n    return this._value;\n  }\n  __attach() {\n    this._a.__addChild(this);\n  }\n  __detach() {\n    this._a.__removeChild(this);\n    super.__detach();\n  }\n  __getNativeConfig() {\n    return {\n      type: 'diffclamp',\n      input: this._a.__getNativeTag(),\n      min: this._min,\n      max: this._max\n    };\n  }\n}\nexport default AnimatedDiffClamp;"],"mappings":"AAUA;;;;;;;;;;;;;AAEA,OAAOA,qBAAP;AACA,OAAOC,oBAAP;;IACMC,iB;;;;;EACJ,2BAAYC,CAAZ,EAAeC,GAAf,EAAoBC,GAApB,EAAyB;IAAA;;IAAA;;IACvB;IACA,MAAKC,EAAL,GAAUH,CAAV;IACA,MAAKI,IAAL,GAAYH,GAAZ;IACA,MAAKI,IAAL,GAAYH,GAAZ;IACA,MAAKI,MAAL,GAAc,MAAKC,UAAL,GAAkB,MAAKJ,EAAL,CAAQK,UAAR,EAAhC;IALuB;EAMxB;;;;WACD,sBAAaC,cAAb,EAA6B;MAC3B,KAAKN,EAAL,CAAQO,YAAR,CAAqBD,cAArB;;MACA,oFAAmBA,cAAnB;IACD;;;WACD,qBAAYE,MAAZ,EAAoB;MAClB,OAAO,IAAId,qBAAJ,CAA0B,IAA1B,EAAgCc,MAAhC,CAAP;IACD;;;WACD,sBAAa;MACX,IAAIC,KAAK,GAAG,KAAKT,EAAL,CAAQK,UAAR,EAAZ;;MACA,IAAIK,IAAI,GAAGD,KAAK,GAAG,KAAKL,UAAxB;MACA,KAAKA,UAAL,GAAkBK,KAAlB;MACA,KAAKN,MAAL,GAAcQ,IAAI,CAACb,GAAL,CAASa,IAAI,CAACZ,GAAL,CAAS,KAAKI,MAAL,GAAcO,IAAvB,EAA6B,KAAKT,IAAlC,CAAT,EAAkD,KAAKC,IAAvD,CAAd;MACA,OAAO,KAAKC,MAAZ;IACD;;;WACD,oBAAW;MACT,KAAKH,EAAL,CAAQY,UAAR,CAAmB,IAAnB;IACD;;;WACD,oBAAW;MACT,KAAKZ,EAAL,CAAQa,aAAR,CAAsB,IAAtB;;MACA;IACD;;;WACD,6BAAoB;MAClB,OAAO;QACLC,IAAI,EAAE,WADD;QAELC,KAAK,EAAE,KAAKf,EAAL,CAAQgB,cAAR,EAFF;QAGLlB,GAAG,EAAE,KAAKG,IAHL;QAILF,GAAG,EAAE,KAAKG;MAJL,CAAP;IAMD;;;;EApC6BP,oB;;AAsChC,eAAeC,iBAAf"},"metadata":{},"sourceType":"module"}
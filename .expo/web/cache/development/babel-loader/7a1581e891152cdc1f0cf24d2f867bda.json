{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport TaskQueue from \"./TaskQueue\";\nimport EventEmitter from \"../../vendor/react-native/vendor/emitter/EventEmitter\";\nimport requestIdleCallback from \"../../modules/requestIdleCallback\";\n\nvar _emitter = new EventEmitter();\n\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  runAfterInteractions: function runAfterInteractions(task) {\n    var tasks = [];\n    var promise = new Promise(function (resolve) {\n      _scheduleUpdate();\n\n      if (task) {\n        tasks.push(task);\n      }\n\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + (task && task.name || '?')\n      });\n\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: function cancel() {\n        _taskQueue.cancelTasks(tasks);\n      }\n    };\n  },\n  createInteractionHandle: function createInteractionHandle() {\n    _scheduleUpdate();\n\n    var handle = ++_inc;\n\n    _addInteractionSet.add(handle);\n\n    return handle;\n  },\n  clearInteractionHandle: function clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n\n    _scheduleUpdate();\n\n    _addInteractionSet.delete(handle);\n\n    _deleteInteractionSet.add(handle);\n  },\n  addListener: _emitter.addListener.bind(_emitter),\n  setDeadline: function setDeadline(deadline) {\n    _deadline = deadline;\n  }\n};\n\nvar _interactionSet = new Set();\n\nvar _addInteractionSet = new Set();\n\nvar _deleteInteractionSet = new Set();\n\nvar _taskQueue = new TaskQueue({\n  onMoreTasks: _scheduleUpdate\n});\n\nvar _nextUpdateHandle = 0;\nvar _inc = 0;\n\nvar _deadline = -1;\n\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      _nextUpdateHandle = setTimeout(_processUpdate);\n    } else {\n      _nextUpdateHandle = requestIdleCallback(_processUpdate);\n    }\n  }\n}\n\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n  var interactionCount = _interactionSet.size;\n\n  _addInteractionSet.forEach(function (handle) {\n    return _interactionSet.add(handle);\n  });\n\n  _deleteInteractionSet.forEach(function (handle) {\n    return _interactionSet.delete(handle);\n  });\n\n  var nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  if (nextInteractionCount === 0) {\n    var begin = Date.now();\n\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n\n      if (_deadline > 0 && Date.now() - begin >= _deadline) {\n        _scheduleUpdate();\n\n        break;\n      }\n    }\n  }\n\n  _addInteractionSet.clear();\n\n  _deleteInteractionSet.clear();\n}\n\nexport default InteractionManager;","map":{"version":3,"names":["invariant","TaskQueue","EventEmitter","requestIdleCallback","_emitter","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","resolve","_scheduleUpdate","push","run","name","_taskQueue","enqueueTasks","then","bind","done","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","Set","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","interactionCount","size","forEach","nextInteractionCount","emit","begin","Date","now","hasTasksToProcess","processNext","clear"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport invariant from 'fbjs/lib/invariant';\nimport TaskQueue from './TaskQueue';\nimport EventEmitter from '../../vendor/react-native/vendor/emitter/EventEmitter';\nimport requestIdleCallback from '../../modules/requestIdleCallback';\nvar _emitter = new EventEmitter();\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  /**\n   * Schedule a function to run after all interactions have completed.\n   */\n  runAfterInteractions(task) {\n    var tasks = [];\n    var promise = new Promise(resolve => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + (task && task.name || '?')\n      });\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        _taskQueue.cancelTasks(tasks);\n      }\n    };\n  },\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle() {\n    _scheduleUpdate();\n    var handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n  addListener: _emitter.addListener.bind(_emitter),\n  /**\n   *\n   * @param deadline\n   */\n  setDeadline(deadline) {\n    _deadline = deadline;\n  }\n};\nvar _interactionSet = new Set();\nvar _addInteractionSet = new Set();\nvar _deleteInteractionSet = new Set();\nvar _taskQueue = new TaskQueue({\n  onMoreTasks: _scheduleUpdate\n});\nvar _nextUpdateHandle = 0;\nvar _inc = 0;\nvar _deadline = -1;\n\n/**\n * Schedule an asynchronous update to the interaction state.\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      _nextUpdateHandle = setTimeout(_processUpdate);\n    } else {\n      _nextUpdateHandle = requestIdleCallback(_processUpdate);\n    }\n  }\n}\n\n/**\n * Notify listeners, process queue, etc\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n  var interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\n  var nextInteractionCount = _interactionSet.size;\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n  if (nextInteractionCount === 0) {\n    // It seems that we can't know the running time of the current event loop,\n    // we can only calculate the running time of the current task queue.\n    var begin = Date.now();\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (_deadline > 0 && Date.now() - begin >= _deadline) {\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\nexport default InteractionManager;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
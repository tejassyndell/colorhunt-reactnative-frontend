{"ast":null,"code":"import { useCallback, useMemo } from \"react\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nexport var osRtl = I18nManager.isRTL;\nvar useUtils = function useUtils(params) {\n  var step = params.step,\n    labelFormatter = params.labelFormatter;\n  var countDecimals = useCallback(function (num) {\n    if (Math.floor(num.valueOf()) === num.valueOf()) return 0;\n    return num.toString().split(\".\")[1].length || 0;\n  }, []);\n  var decimals = useMemo(function () {\n    return countDecimals(step);\n  }, [step, countDecimals]);\n  var decimalRound = function decimalRound(num) {\n    var m = 10 ** decimals;\n    return Math.round(num * m) / m;\n  };\n  var formatLabel = function formatLabel(value) {\n    var _labelFormatter;\n    return (_labelFormatter = labelFormatter == null ? void 0 : labelFormatter(value)) != null ? _labelFormatter : value.toFixed(decimals);\n  };\n  return {\n    formatLabel: formatLabel,\n    decimalRound: decimalRound\n  };\n};\nexport default useUtils;","map":{"version":3,"names":["useCallback","useMemo","I18nManager","osRtl","isRTL","useUtils","params","step","labelFormatter","countDecimals","num","Math","floor","valueOf","toString","split","length","decimals","decimalRound","m","round","formatLabel","value","_labelFormatter","toFixed"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/node_modules/react-native-range-slider-expo/src/components/utils.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\";\nimport { I18nManager } from \"react-native\";\n\nexport const osRtl = I18nManager.isRTL;\n\ninterface UtilsParams {\n  step: number;\n  labelFormatter: ((value: number) => string) | undefined\n}\n\nconst useUtils = (params: UtilsParams) => {\n  const {step, labelFormatter} = params;\n\n  const countDecimals = useCallback((num: number) => {\n    if (Math.floor(num.valueOf()) === num.valueOf()) return 0;\n    return num.toString().split(\".\")[1].length || 0;\n  }, []);\n  \n  const decimals = useMemo(() => countDecimals(step), [step, countDecimals]);\n\n  const decimalRound = (num: number) => {\n    const m = 10 ** decimals;\n    return Math.round(num * m) / m;\n  }\n\n  const formatLabel = (value: number) => {\n    return labelFormatter?.(value) ?? value.toFixed(decimals);\n  };\n\n  return {formatLabel,  decimalRound};\n}\n\nexport default useUtils;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAAC,OAAAC,WAAA;AAG7C,OAAO,IAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK;AAOtC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,MAAmB,EAAK;EACxC,IAAOC,IAAI,GAAoBD,MAAM,CAA9BC,IAAI;IAAEC,cAAc,GAAIF,MAAM,CAAxBE,cAAc;EAE3B,IAAMC,aAAa,GAAGT,WAAW,CAAC,UAACU,GAAW,EAAK;IACjD,IAAIC,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC,KAAKH,GAAG,CAACG,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC;IACzD,OAAOH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,IAAI,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMC,QAAQ,GAAGhB,OAAO,CAAC;IAAA,OAAMQ,aAAa,CAACF,IAAI,CAAC;EAAA,GAAE,CAACA,IAAI,EAAEE,aAAa,CAAC,CAAC;EAE1E,IAAMS,YAAY,GAAG,SAAfA,YAAYA,CAAIR,GAAW,EAAK;IACpC,IAAMS,CAAC,GAAG,EAAE,IAAIF,QAAQ;IACxB,OAAON,IAAI,CAACS,KAAK,CAACV,GAAG,GAAGS,CAAC,CAAC,GAAGA,CAAC;EAChC,CAAC;EAED,IAAME,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAa,EAAK;IAAA,IAAAC,eAAA;IACrC,QAAAA,eAAA,GAAOf,cAAc,oBAAdA,cAAc,CAAGc,KAAK,CAAC,YAAAC,eAAA,GAAID,KAAK,CAACE,OAAO,CAACP,QAAQ,CAAC;EAC3D,CAAC;EAED,OAAO;IAACI,WAAW,EAAXA,WAAW;IAAGH,YAAY,EAAZA;EAAY,CAAC;AACrC,CAAC;AAED,eAAeb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
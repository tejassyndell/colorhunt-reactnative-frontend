{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, memo, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';\nimport KnobBubble from \"./components/KnobBubble\";\nimport useUtils, { osRtl } from \"./components/utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nvar fontSize = 15;\nvar RangeSlider = memo(function (_ref) {\n  var min = _ref.min,\n    max = _ref.max,\n    fromValueOnChange = _ref.fromValueOnChange,\n    toValueOnChange = _ref.toValueOnChange,\n    _ref$step = _ref.step,\n    step = _ref$step === void 0 ? 1 : _ref$step,\n    _ref$styleSize = _ref.styleSize,\n    styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n    _ref$fromKnobColor = _ref.fromKnobColor,\n    fromKnobColor = _ref$fromKnobColor === void 0 ? '#00a2ff' : _ref$fromKnobColor,\n    _ref$toKnobColor = _ref.toKnobColor,\n    toKnobColor = _ref$toKnobColor === void 0 ? '#00a2ff' : _ref$toKnobColor,\n    _ref$inRangeBarColor = _ref.inRangeBarColor,\n    inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(100,100,100)' : _ref$inRangeBarColor,\n    _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n    outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(200,200,200)' : _ref$outOfRangeBarCol,\n    _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n    valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n    _ref$rangeLabelsTextC = _ref.rangeLabelsTextColor,\n    rangeLabelsTextColor = _ref$rangeLabelsTextC === void 0 ? 'rgb(60,60,60)' : _ref$rangeLabelsTextC,\n    _ref$showRangeLabels = _ref.showRangeLabels,\n    showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n    _ref$showValueLabels = _ref.showValueLabels,\n    showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n    initialFromValue = _ref.initialFromValue,\n    initialToValue = _ref.initialToValue,\n    _knobSize = _ref.knobSize,\n    _ref$knobBubbleTextSt = _ref.knobBubbleTextStyle,\n    knobBubbleTextStyle = _ref$knobBubbleTextSt === void 0 ? {} : _ref$knobBubbleTextSt,\n    _ref$containerStyle = _ref.containerStyle,\n    customContainerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n    customBarHeight = _ref.barHeight,\n    labelFormatter = _ref.labelFormatter;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    wasInitialized = _useState2[0],\n    setWasInitialized = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    knobSize = _useState4[0],\n    setknobSize = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    barHeight = _useState6[0],\n    setBarHeight = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    stepInPixels = _useState8[0],\n    setStepInPixels = _useState8[1];\n  var _useState9 = useState('row'),\n    _useState10 = _slicedToArray(_useState9, 2),\n    flexDirection = _useState10[0],\n    setFlexDirection = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    fromValueOffset = _useState12[0],\n    setFromValueOffset = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    toValueOffset = _useState14[0],\n    setToValueOffset = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    sliderWidth = _useState16[0],\n    setSliderWidth = _useState16[1];\n  var _useState17 = useState(3),\n    _useState18 = _slicedToArray(_useState17, 2),\n    fromElevation = _useState18[0],\n    setFromElevation = _useState18[1];\n  var _useState19 = useState(3),\n    _useState20 = _slicedToArray(_useState19, 2),\n    toElevation = _useState20[0],\n    setToElevation = _useState20[1];\n  var _useState21 = useState(new Animated.Value(0)),\n    _useState22 = _slicedToArray(_useState21, 1),\n    translateXfromValue = _useState22[0];\n  var _useState23 = useState(new Animated.Value(0)),\n    _useState24 = _slicedToArray(_useState23, 1),\n    translateXtoValue = _useState24[0];\n  var _useState25 = useState(new Animated.Value(0.01)),\n    _useState26 = _slicedToArray(_useState25, 1),\n    fromValueScale = _useState26[0];\n  var _useState27 = useState(new Animated.Value(0.01)),\n    _useState28 = _slicedToArray(_useState27, 1),\n    toValueScale = _useState28[0];\n  var _useState29 = useState(new Animated.Value(0.01)),\n    _useState30 = _slicedToArray(_useState29, 1),\n    rightBarScaleX = _useState30[0];\n  var _useState31 = useState(new Animated.Value(0.01)),\n    _useState32 = _slicedToArray(_useState31, 1),\n    leftBarScaleX = _useState32[0];\n  var toValueTextRef = React.createRef();\n  var fromValueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  var _useUtils = useUtils({\n      step: step,\n      labelFormatter: labelFormatter\n    }),\n    formatLabel = _useUtils.formatLabel,\n    decimalRound = _useUtils.decimalRound;\n  useEffect(function () {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  useEffect(function () {\n    if (wasInitialized) {\n      var _fromValueTextRef$cur, _toValueTextRef$curre;\n      var stepSize = setStepSize(max, min, step);\n      (_fromValueTextRef$cur = fromValueTextRef.current) == null ? void 0 : _fromValueTextRef$cur.setNativeProps({\n        text: formatLabel(min)\n      });\n      (_toValueTextRef$curre = toValueTextRef.current) == null ? void 0 : _toValueTextRef$curre.setNativeProps({\n        text: formatLabel(min)\n      });\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        var offset = (initialFromValue - min) / step * stepSize - knobSize / 2;\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        var _offset = (initialToValue - min) / step * stepSize - knobSize / 2;\n        setToValueStatic(_offset, knobSize, stepSize);\n        setValueText(_offset, false);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n  useEffect(function () {\n    var sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    var size = _knobSize != null ? _knobSize : sizeBasedOnStyleSize;\n    setknobSize(customBarHeight ? Math.max(customBarHeight, size) : size);\n    setBarHeight(customBarHeight != null ? customBarHeight : sizeBasedOnStyleSize / 3);\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize, customBarHeight]);\n  var setFromValueStatic = function setFromValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    var changeTo = Math.floor((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    fromValueOnChange(decimalRound(changeTo));\n  };\n  var setFromValue = function setFromValue(newOffset) {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n  var setToValueStatic = function setToValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    var changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n    toValueOnChange(decimalRound(changeTo));\n  };\n  var setToValue = function setToValue(newOffset) {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n  };\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n  var setValueText = function setValueText(totalOffset) {\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var isFrom = from && fromValueTextRef != null;\n    var isTo = !from && toValueTextRef != null;\n    if (isFrom || isTo) {\n      var _current;\n      var numericValue = Math[isFrom ? 'floor' : 'ceil']((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      var text = formatLabel(numericValue);\n      (_current = (isFrom ? fromValueTextRef : toValueTextRef).current) == null ? void 0 : _current.setNativeProps({\n        text: text\n      });\n    }\n  };\n  var onGestureEventFromValue = function onGestureEventFromValue(event) {\n    var totalOffset = event.nativeEvent.translationX + fromValueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n  var onHandlerStateChangeFromValue = function onHandlerStateChangeFromValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n      setFromValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(fromValueScale, 0.01);\n    }\n  };\n  var onGestureEventToValue = function onGestureEventToValue(event) {\n    var totalOffset = event.nativeEvent.translationX + toValueOffset;\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - (totalOffset + knobSize / 2) / sliderWidth);\n    }\n  };\n  var onHandlerStateChangeToValue = function onHandlerStateChangeToValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n      scaleTo(toValueScale, 0.01);\n      var changeTo = Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      toValueOnChange(decimalRound(changeTo));\n    }\n  };\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n  var setElevations = function setElevations(fromValue, toValue) {\n    setFromElevation(fromValue);\n    setToElevation(toValue);\n  };\n  var onLayout = function onLayout(event) {\n    if (wasInitialized === false) {\n      var width = event.nativeEvent.layout.width;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  };\n  var padding = useMemo(function () {\n    return styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31;\n  }, [styleSize]);\n  return _jsx(GestureHandlerRootView, {\n    children: _jsxs(Animated.View, {\n      style: [styles.container, {\n        opacity: opacity,\n        padding: padding\n      }, customContainerStyle],\n      children: [showValueLabels && _jsxs(View, {\n        style: {\n          width: '100%',\n          height: 1,\n          flexDirection: flexDirection\n        },\n        children: [_jsx(KnobBubble, {\n          knobSize: knobSize,\n          valueLabelsBackgroundColor: valueLabelsBackgroundColor,\n          translateX: translateXfromValue,\n          scale: fromValueScale,\n          textInputRef: fromValueTextRef,\n          textStyle: knobBubbleTextStyle\n        }), _jsx(KnobBubble, {\n          knobSize: knobSize,\n          valueLabelsBackgroundColor: valueLabelsBackgroundColor,\n          translateX: translateXtoValue,\n          scale: toValueScale,\n          textInputRef: toValueTextRef,\n          textStyle: knobBubbleTextStyle\n        })]\n      }), _jsxs(View, {\n        style: {\n          width: '100%',\n          height: knobSize,\n          marginVertical: 4,\n          position: 'relative',\n          flexDirection: flexDirection,\n          alignItems: 'center'\n        },\n        children: [_jsx(View, {\n          style: {\n            position: 'absolute',\n            backgroundColor: inRangeBarColor,\n            left: knobSize / 4,\n            marginLeft: -knobSize / 4,\n            right: knobSize / 4,\n            height: barHeight\n          },\n          onLayout: onLayout\n        }), _jsx(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: knobSize / 4,\n            marginLeft: -knobSize / 4,\n            right: knobSize / 4,\n            height: barHeight,\n            backgroundColor: outOfRangeBarColor,\n            transform: [{\n              translateX: sliderWidth / 2\n            }, {\n              scaleX: rightBarScaleX\n            }, {\n              translateX: -sliderWidth / 2\n            }]\n          }\n        }), _jsx(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: -knobSize / 4,\n            width: knobSize / 2,\n            height: barHeight,\n            borderRadius: barHeight,\n            backgroundColor: outOfRangeBarColor\n          }\n        }), _jsx(Animated.View, {\n          style: {\n            width: sliderWidth,\n            height: barHeight,\n            backgroundColor: outOfRangeBarColor,\n            transform: [{\n              translateX: -sliderWidth / 2\n            }, {\n              scaleX: leftBarScaleX\n            }, {\n              translateX: sliderWidth / 2\n            }]\n          }\n        }), _jsx(Animated.View, {\n          style: {\n            position: 'absolute',\n            left: sliderWidth - knobSize / 4,\n            width: knobSize / 2,\n            height: barHeight,\n            borderRadius: barHeight,\n            backgroundColor: outOfRangeBarColor\n          }\n        }), _jsx(PanGestureHandler, {\n          onGestureEvent: onGestureEventFromValue,\n          onHandlerStateChange: onHandlerStateChangeFromValue,\n          children: _jsx(Animated.View, {\n            style: [styles.knob, {\n              height: knobSize,\n              width: knobSize,\n              borderRadius: knobSize,\n              backgroundColor: fromKnobColor,\n              elevation: fromElevation,\n              transform: [{\n                translateX: translateXfromValue\n              }]\n            }]\n          })\n        }), _jsx(PanGestureHandler, {\n          onGestureEvent: onGestureEventToValue,\n          onHandlerStateChange: onHandlerStateChangeToValue,\n          children: _jsx(Animated.View, {\n            style: [styles.knob, {\n              height: knobSize,\n              width: knobSize,\n              borderRadius: knobSize,\n              backgroundColor: toKnobColor,\n              elevation: toElevation,\n              transform: [{\n                translateX: translateXtoValue\n              }]\n            }]\n          })\n        })]\n      }), showRangeLabels && _jsxs(View, {\n        style: {\n          width: '100%',\n          flexDirection: flexDirection,\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize: fontSize\n          },\n          children: min\n        }), _jsx(Text, {\n          style: {\n            color: rangeLabelsTextColor,\n            fontWeight: \"bold\",\n            fontSize: fontSize\n          },\n          children: max\n        })]\n      })]\n    })\n  });\n});\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});\nexport default gestureHandlerRootHOC(RangeSlider);","map":{"version":3,"names":["React","useState","useEffect","memo","useMemo","Animated","StyleSheet","View","Text","gestureHandlerRootHOC","GestureHandlerRootView","PanGestureHandler","State","KnobBubble","useUtils","osRtl","jsx","_jsx","jsxs","_jsxs","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","fontSize","RangeSlider","_ref","min","max","fromValueOnChange","toValueOnChange","_ref$step","step","_ref$styleSize","styleSize","_ref$fromKnobColor","fromKnobColor","_ref$toKnobColor","toKnobColor","_ref$inRangeBarColor","inRangeBarColor","_ref$outOfRangeBarCol","outOfRangeBarColor","_ref$valueLabelsBackg","valueLabelsBackgroundColor","_ref$rangeLabelsTextC","rangeLabelsTextColor","_ref$showRangeLabels","showRangeLabels","_ref$showValueLabels","showValueLabels","initialFromValue","initialToValue","_knobSize","knobSize","_ref$knobBubbleTextSt","knobBubbleTextStyle","_ref$containerStyle","containerStyle","customContainerStyle","customBarHeight","barHeight","labelFormatter","_useState","_useState2","_slicedToArray","wasInitialized","setWasInitialized","_useState3","_useState4","setknobSize","_useState5","_useState6","setBarHeight","_useState7","_useState8","stepInPixels","setStepInPixels","_useState9","_useState10","flexDirection","setFlexDirection","_useState11","_useState12","fromValueOffset","setFromValueOffset","_useState13","_useState14","toValueOffset","setToValueOffset","_useState15","_useState16","sliderWidth","setSliderWidth","_useState17","_useState18","fromElevation","setFromElevation","_useState19","_useState20","toElevation","setToElevation","_useState21","Value","_useState22","translateXfromValue","_useState23","_useState24","translateXtoValue","_useState25","_useState26","fromValueScale","_useState27","_useState28","toValueScale","_useState29","_useState30","rightBarScaleX","_useState31","_useState32","leftBarScaleX","toValueTextRef","createRef","fromValueTextRef","opacity","useRef","current","_useUtils","formatLabel","decimalRound","_fromValueTextRef$cur","_toValueTextRef$curre","stepSize","setStepSize","setNativeProps","text","offset","setFromValueStatic","setValueText","setToValueStatic","timing","toValue","duration","useNativeDriver","start","sizeBasedOnStyleSize","size","Math","setValue","newOffset","floor","setFromValue","changeTo","ceil","setToValue","numberOfSteps","totalOffset","from","arguments","length","undefined","isFrom","isTo","_current","numericValue","onGestureEventFromValue","event","nativeEvent","translationX","onHandlerStateChangeFromValue","state","BEGAN","scaleTo","setElevations","END","onGestureEventToValue","onHandlerStateChangeToValue","param","fromValue","onLayout","width","layout","padding","children","style","styles","container","height","translateX","scale","textInputRef","textStyle","marginVertical","position","alignItems","backgroundColor","left","marginLeft","right","transform","scaleX","borderRadius","onGestureEvent","onHandlerStateChange","knob","elevation","justifyContent","color","fontWeight","create"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/node_modules/react-native-range-slider-expo/src/RangeSlider.tsx"],"sourcesContent":["import React, { useState, useEffect, memo, useMemo } from 'react';\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, ViewStyle, TextStyle } from 'react-native';\nimport { gestureHandlerRootHOC, GestureHandlerRootView, PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\nimport KnobBubble from './components/KnobBubble';\nimport useUtils, { osRtl } from './components/utils';\n\nconst SMALL_SIZE = 24;\nconst MEDIUM_SIZE = 34;\nconst LARGE_SIZE = 44;\nconst fontSize = 15;\n\ninterface SliderProps {\n  min: number,\n  max: number,\n  fromValueOnChange: (value: number) => void,\n  toValueOnChange: (value: number) => void,\n  step?: number,\n  styleSize?: 'small' | 'medium' | 'large' | number,\n  fromKnobColor?: string,\n  toKnobColor?: string,\n  inRangeBarColor?: string,\n  outOfRangeBarColor?: string,\n  knobBubbleTextStyle?: TextStyle,\n  valueLabelsBackgroundColor?: string,\n  rangeLabelsTextColor?: string,\n  showRangeLabels?: boolean,\n  showValueLabels?: boolean,\n  initialFromValue?: number,\n  initialToValue?: number,\n  knobSize?: number,\n  containerStyle?: ViewStyle,\n  barHeight?: number,\n  labelFormatter?: (value: number) => string,\n}\n\nconst RangeSlider = memo(({\n  min, max, fromValueOnChange, toValueOnChange,\n  step = 1,\n  styleSize = 'medium',\n  fromKnobColor = '#00a2ff',\n  toKnobColor = '#00a2ff',\n  inRangeBarColor = 'rgb(100,100,100)',\n  outOfRangeBarColor = 'rgb(200,200,200)',\n  valueLabelsBackgroundColor = '#3a4766',\n  rangeLabelsTextColor = 'rgb(60,60,60)',\n  showRangeLabels = true,\n  showValueLabels = true,\n  initialFromValue,\n  initialToValue,\n  knobSize: _knobSize,\n  knobBubbleTextStyle = {},\n  containerStyle: customContainerStyle = {},\n  barHeight: customBarHeight,\n  labelFormatter,\n}: SliderProps) => {\n  \n  // settings\n  const [wasInitialized, setWasInitialized] = useState(false);\n  const [knobSize, setknobSize] = useState(0);\n  const [barHeight, setBarHeight] = useState(0);\n  const [stepInPixels, setStepInPixels] = useState(0);\n\n  // rtl settings\n  const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\n\n  const [fromValueOffset, setFromValueOffset] = useState(0);\n  const [toValueOffset, setToValueOffset] = useState(0);\n  const [sliderWidth, setSliderWidth] = useState(0);\n  const [fromElevation, setFromElevation] = useState(3);\n  const [toElevation, setToElevation] = useState(3);\n\n  // animation values\n  const [translateXfromValue] = useState(new Animated.Value(0));\n  const [translateXtoValue] = useState(new Animated.Value(0));\n  const [fromValueScale] = useState(new Animated.Value(0.01));\n  const [toValueScale] = useState(new Animated.Value(0.01));\n  const [rightBarScaleX] = useState(new Animated.Value(0.01));\n  const [leftBarScaleX] = useState(new Animated.Value(0.01));\n\n  // refs\n  const toValueTextRef = React.createRef<TextInput>();\n  const fromValueTextRef = React.createRef<TextInput>();\n  const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\n  const {formatLabel, decimalRound} = useUtils({step, labelFormatter});\n\n  // initalizing settings\n  useEffect(() => {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n  }, [knobSize]);\n  \n  useEffect(() => {\n    if (wasInitialized) {\n      const stepSize = setStepSize(max, min, step);\n      fromValueTextRef.current?.setNativeProps({ text: formatLabel(min) });\n      toValueTextRef.current?.setNativeProps({ text: formatLabel(min) });\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        const offset = ((initialFromValue - min) / step) * stepSize - (knobSize / 2);\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        const offset = ((initialToValue - min) / step) * stepSize - (knobSize / 2);\n        setToValueStatic(offset, knobSize, stepSize);\n        setValueText(offset, false);\n      }\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n\n  useEffect(() => {\n    const sizeBasedOnStyleSize = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    const size = _knobSize ?? sizeBasedOnStyleSize;\n    setknobSize(customBarHeight ? Math.max(customBarHeight, size) : size);\n    setBarHeight(customBarHeight ?? sizeBasedOnStyleSize / 3)\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize, customBarHeight]);\n  \n  // initalizing settings helpers\n  const setFromValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    const changeTo = Math.floor(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    fromValueOnChange(decimalRound(changeTo));\n  }\n  const setFromValue = (newOffset: number) => {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\n  }\n  const setToValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\n    newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n    toValueOnChange(decimalRound(changeTo));\n  }\n  const setToValue = (newOffset: number) => {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n  }\n  const setStepSize = (max: number, min: number, step: number) => {\n    const numberOfSteps = ((max - min) / step);\n    const stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  }\n  const setValueText = (totalOffset: number, from = true) => {\n    const isFrom = from && fromValueTextRef != null;\n    const isTo = !from && toValueTextRef != null;\n    if (isFrom || isTo) {\n      const numericValue: number = Math[isFrom ? 'floor' : 'ceil'](((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      const text = formatLabel(numericValue);\n      (isFrom ? fromValueTextRef : toValueTextRef).current?.setNativeProps({ text });\n    }\n  }\n\n  // from value gesture events ------------------------------------------------------------------------\n  const onGestureEventFromValue = (event: PanGestureHandlerGestureEvent) => {\n    let totalOffset = event.nativeEvent.translationX + fromValueOffset;\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\n    }\n  }\n  const onHandlerStateChangeFromValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n      setFromValueStatic(newOffset, knobSize, stepInPixels)\n      scaleTo(fromValueScale, 0.01);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // to value gesture events ------------------------------------------------------------------------\n  const onGestureEventToValue = (event: PanGestureHandlerGestureEvent) => {\n    const totalOffset = event.nativeEvent.translationX + toValueOffset;\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - ((totalOffset + (knobSize / 2)) / sliderWidth));\n    }\n  }\n  const onHandlerStateChangeToValue = (event: PanGestureHandlerGestureEvent) => {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n    if (event.nativeEvent.state === State.END) {\n      let newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\n      scaleTo(toValueScale, 0.01);\n      const changeTo = Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\n      toValueOnChange(decimalRound(changeTo));\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // gesture events help functions ------------------------------------------------------------------\n  const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param, {\n    toValue,\n    duration: 150,\n    useNativeDriver: true\n  }).start();\n\n  const setElevations = (fromValue: number, toValue: number) => {\n    setFromElevation(fromValue);\n    setToElevation(toValue)\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  // setting bar width ------------------------------------------------------------------------------\n  const onLayout = (event: LayoutChangeEvent) => {\n    if (wasInitialized === false) {\n      const { width } = event.nativeEvent.layout;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  }\n  // ------------------------------------------------------------------------------------------------\n\n  const padding = useMemo(() => styleSize === 'large' ? 17 : styleSize === 'medium' ? 24 : 31, [styleSize]);\n\n  return (\n    <GestureHandlerRootView>\n      <Animated.View style={[styles.container, { opacity, padding }, customContainerStyle]}>\n        {\n          showValueLabels &&\n          <View style={{ width: '100%', height: 1, flexDirection }}>\n            <KnobBubble {...{ knobSize, valueLabelsBackgroundColor }}\n              translateX={translateXfromValue}\n              scale={fromValueScale}\n              textInputRef={fromValueTextRef}\n              textStyle={knobBubbleTextStyle}\n            />\n            <KnobBubble {...{ knobSize, valueLabelsBackgroundColor }}\n              translateX={translateXtoValue}\n              scale={toValueScale}\n              textInputRef={toValueTextRef}\n              textStyle={knobBubbleTextStyle}\n            />\n          </View>\n        }\n        <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\n          <View style={{ position: 'absolute', backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight }} onLayout={onLayout} />\n          <Animated.View style={{ position: 'absolute', left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: sliderWidth / 2 }, { scaleX: rightBarScaleX }, { translateX: -sliderWidth / 2 }] }} />\n          <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n          <Animated.View style={{ width: sliderWidth, height: barHeight, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: leftBarScaleX }, { translateX: sliderWidth / 2 }] }} />\n          <Animated.View style={{ position: 'absolute', left: sliderWidth - knobSize / 4, width: knobSize / 2, height: barHeight, borderRadius: barHeight, backgroundColor: outOfRangeBarColor }} />\n          <PanGestureHandler onGestureEvent={onGestureEventFromValue} onHandlerStateChange={onHandlerStateChangeFromValue}>\n            <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: fromKnobColor, elevation: fromElevation, transform: [{ translateX: translateXfromValue }] }]} />\n          </PanGestureHandler>\n          <PanGestureHandler onGestureEvent={onGestureEventToValue} onHandlerStateChange={onHandlerStateChangeToValue}>\n            <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: toKnobColor, elevation: toElevation, transform: [{ translateX: translateXtoValue }] }]} />\n          </PanGestureHandler>\n        </View>\n        {\n          showRangeLabels &&\n          <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\n            <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{min}</Text>\n            <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{max}</Text>\n          </View>\n        }\n      </Animated.View>\n    </GestureHandlerRootView>\n  );\n})\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});\n\nexport default gestureHandlerRootHOC(RangeSlider);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,IAAI,EAAEC,OAAO,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAElE,SAASC,qBAAqB,EAAEC,sBAAsB,EAAEC,iBAAiB,EAAiCC,KAAK,QAAQ,8BAA8B;AACrJ,OAAOC,UAAU;AACjB,OAAOC,QAAQ,IAAIC,KAAK;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAErD,IAAMC,UAAU,GAAG,EAAE;AACrB,IAAMC,WAAW,GAAG,EAAE;AACtB,IAAMC,UAAU,GAAG,EAAE;AACrB,IAAMC,QAAQ,GAAG,EAAE;AA0BnB,IAAMC,WAAW,GAAGrB,IAAI,CAAC,UAAAsB,IAAA,EAmBN;EAAA,IAlBjBC,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,GAAG,GAAAF,IAAA,CAAHE,GAAG;IAAEC,iBAAiB,GAAAH,IAAA,CAAjBG,iBAAiB;IAAEC,eAAe,GAAAJ,IAAA,CAAfI,eAAe;IAAAC,SAAA,GAAAL,IAAA,CAC5CM,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,CAAC,GAAAA,SAAA;IAAAE,cAAA,GAAAP,IAAA,CACRQ,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,QAAQ,GAAAA,cAAA;IAAAE,kBAAA,GAAAT,IAAA,CACpBU,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,SAAS,GAAAA,kBAAA;IAAAE,gBAAA,GAAAX,IAAA,CACzBY,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,SAAS,GAAAA,gBAAA;IAAAE,oBAAA,GAAAb,IAAA,CACvBc,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,kBAAkB,GAAAA,oBAAA;IAAAE,qBAAA,GAAAf,IAAA,CACpCgB,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG,kBAAkB,GAAAA,qBAAA;IAAAE,qBAAA,GAAAjB,IAAA,CACvCkB,0BAA0B;IAA1BA,0BAA0B,GAAAD,qBAAA,cAAG,SAAS,GAAAA,qBAAA;IAAAE,qBAAA,GAAAnB,IAAA,CACtCoB,oBAAoB;IAApBA,oBAAoB,GAAAD,qBAAA,cAAG,eAAe,GAAAA,qBAAA;IAAAE,oBAAA,GAAArB,IAAA,CACtCsB,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA;IAAAE,oBAAA,GAAAvB,IAAA,CACtBwB,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,IAAI,GAAAA,oBAAA;IACtBE,gBAAgB,GAAAzB,IAAA,CAAhByB,gBAAgB;IAChBC,cAAc,GAAA1B,IAAA,CAAd0B,cAAc;IACJC,SAAS,GAAA3B,IAAA,CAAnB4B,QAAQ;IAAAC,qBAAA,GAAA7B,IAAA,CACR8B,mBAAmB;IAAnBA,mBAAmB,GAAAD,qBAAA,cAAG,CAAC,CAAC,GAAAA,qBAAA;IAAAE,mBAAA,GAAA/B,IAAA,CACxBgC,cAAc;IAAEC,oBAAoB,GAAAF,mBAAA,cAAG,CAAC,CAAC,GAAAA,mBAAA;IAC9BG,eAAe,GAAAlC,IAAA,CAA1BmC,SAAS;IACTC,cAAc,GAAApC,IAAA,CAAdoC,cAAc;EAId,IAAAC,SAAA,GAA4C7D,QAAQ,CAAC,KAAK,CAAC;IAAA8D,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAApDG,cAAc,GAAAF,UAAA;IAAEG,iBAAiB,GAAAH,UAAA;EACxC,IAAAI,UAAA,GAAgClE,QAAQ,CAAC,CAAC,CAAC;IAAAmE,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAApCd,QAAQ,GAAAe,UAAA;IAAEC,WAAW,GAAAD,UAAA;EAC5B,IAAAE,UAAA,GAAkCrE,QAAQ,CAAC,CAAC,CAAC;IAAAsE,UAAA,GAAAP,cAAA,CAAAM,UAAA;IAAtCV,SAAS,GAAAW,UAAA;IAAEC,YAAY,GAAAD,UAAA;EAC9B,IAAAE,UAAA,GAAwCxE,QAAQ,CAAC,CAAC,CAAC;IAAAyE,UAAA,GAAAV,cAAA,CAAAS,UAAA;IAA5CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAGpC,IAAAG,UAAA,GAA0C5E,QAAQ,CAAkE,KAAK,CAAC;IAAA6E,WAAA,GAAAd,cAAA,CAAAa,UAAA;IAAnHE,aAAa,GAAAD,WAAA;IAAEE,gBAAgB,GAAAF,WAAA;EAEtC,IAAAG,WAAA,GAA8ChF,QAAQ,CAAC,CAAC,CAAC;IAAAiF,WAAA,GAAAlB,cAAA,CAAAiB,WAAA;IAAlDE,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAC1C,IAAAG,WAAA,GAA0CpF,QAAQ,CAAC,CAAC,CAAC;IAAAqF,WAAA,GAAAtB,cAAA,CAAAqB,WAAA;IAA9CE,aAAa,GAAAD,WAAA;IAAEE,gBAAgB,GAAAF,WAAA;EACtC,IAAAG,WAAA,GAAsCxF,QAAQ,CAAC,CAAC,CAAC;IAAAyF,WAAA,GAAA1B,cAAA,CAAAyB,WAAA;IAA1CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAClC,IAAAG,WAAA,GAA0C5F,QAAQ,CAAC,CAAC,CAAC;IAAA6F,WAAA,GAAA9B,cAAA,CAAA6B,WAAA;IAA9CE,aAAa,GAAAD,WAAA;IAAEE,gBAAgB,GAAAF,WAAA;EACtC,IAAAG,WAAA,GAAsChG,QAAQ,CAAC,CAAC,CAAC;IAAAiG,WAAA,GAAAlC,cAAA,CAAAiC,WAAA;IAA1CE,WAAW,GAAAD,WAAA;IAAEE,cAAc,GAAAF,WAAA;EAGlC,IAAAG,WAAA,GAA8BpG,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,CAAC,CAAC,CAAC;IAAAC,WAAA,GAAAvC,cAAA,CAAAqC,WAAA;IAAtDG,mBAAmB,GAAAD,WAAA;EAC1B,IAAAE,WAAA,GAA4BxG,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,CAAC,CAAC,CAAC;IAAAI,WAAA,GAAA1C,cAAA,CAAAyC,WAAA;IAApDE,iBAAiB,GAAAD,WAAA;EACxB,IAAAE,WAAA,GAAyB3G,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,IAAI,CAAC,CAAC;IAAAO,WAAA,GAAA7C,cAAA,CAAA4C,WAAA;IAApDE,cAAc,GAAAD,WAAA;EACrB,IAAAE,WAAA,GAAuB9G,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,IAAI,CAAC,CAAC;IAAAU,WAAA,GAAAhD,cAAA,CAAA+C,WAAA;IAAlDE,YAAY,GAAAD,WAAA;EACnB,IAAAE,WAAA,GAAyBjH,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,IAAI,CAAC,CAAC;IAAAa,WAAA,GAAAnD,cAAA,CAAAkD,WAAA;IAApDE,cAAc,GAAAD,WAAA;EACrB,IAAAE,WAAA,GAAwBpH,QAAQ,CAAC,IAAII,QAAQ,CAACiG,KAAK,CAAC,IAAI,CAAC,CAAC;IAAAgB,WAAA,GAAAtD,cAAA,CAAAqD,WAAA;IAAnDE,aAAa,GAAAD,WAAA;EAGpB,IAAME,cAAc,GAAGxH,KAAK,CAACyH,SAAS,CAAY,CAAC;EACnD,IAAMC,gBAAgB,GAAG1H,KAAK,CAACyH,SAAS,CAAY,CAAC;EACrD,IAAME,OAAO,GAAG3H,KAAK,CAAC4H,MAAM,CAAiB,IAAIvH,QAAQ,CAACiG,KAAK,CAAC,CAAC,CAAC,CAAC,CAACuB,OAAO;EAC3E,IAAAC,SAAA,GAAoChH,QAAQ,CAAC;MAACiB,IAAI,EAAJA,IAAI;MAAE8B,cAAc,EAAdA;IAAc,CAAC,CAAC;IAA7DkE,WAAW,GAAAD,SAAA,CAAXC,WAAW;IAAEC,YAAY,GAAAF,SAAA,CAAZE,YAAY;EAGhC9H,SAAS,CAAC,YAAM;IACd8E,gBAAgB,CAACjE,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC;EACjD,CAAC,EAAE,CAACsC,QAAQ,CAAC,CAAC;EAEdnD,SAAS,CAAC,YAAM;IACd,IAAI+D,cAAc,EAAE;MAAA,IAAAgE,qBAAA,EAAAC,qBAAA;MAClB,IAAMC,QAAQ,GAAGC,WAAW,CAACzG,GAAG,EAAED,GAAG,EAAEK,IAAI,CAAC;MAC5C,CAAAkG,qBAAA,GAAAP,gBAAgB,CAACG,OAAO,qBAAxBI,qBAAA,CAA0BI,cAAc,CAAC;QAAEC,IAAI,EAAEP,WAAW,CAACrG,GAAG;MAAE,CAAC,CAAC;MACpE,CAAAwG,qBAAA,GAAAV,cAAc,CAACK,OAAO,qBAAtBK,qBAAA,CAAwBG,cAAc,CAAC;QAAEC,IAAI,EAAEP,WAAW,CAACrG,GAAG;MAAE,CAAC,CAAC;MAClE,IAAI,OAAOwB,gBAAgB,KAAK,QAAQ,IAAIA,gBAAgB,IAAIxB,GAAG,IAAIwB,gBAAgB,IAAIvB,GAAG,EAAE;QAC9F,IAAM4G,MAAM,GAAI,CAACrF,gBAAgB,GAAGxB,GAAG,IAAIK,IAAI,GAAIoG,QAAQ,GAAI9E,QAAQ,GAAG,CAAE;QAC5EmF,kBAAkB,CAACD,MAAM,EAAElF,QAAQ,EAAE8E,QAAQ,CAAC;QAC9CM,YAAY,CAACF,MAAM,GAAGlF,QAAQ,EAAE,IAAI,CAAC;MACvC;MACA,IAAI,OAAOF,cAAc,KAAK,QAAQ,IAAIA,cAAc,IAAIzB,GAAG,IAAIyB,cAAc,IAAIxB,GAAG,IAAI,OAAOuB,gBAAgB,KAAK,QAAQ,IAAIC,cAAc,GAAGD,gBAAgB,EAAE;QACrK,IAAMqF,OAAM,GAAI,CAACpF,cAAc,GAAGzB,GAAG,IAAIK,IAAI,GAAIoG,QAAQ,GAAI9E,QAAQ,GAAG,CAAE;QAC1EqF,gBAAgB,CAACH,OAAM,EAAElF,QAAQ,EAAE8E,QAAQ,CAAC;QAC5CM,YAAY,CAACF,OAAM,EAAE,KAAK,CAAC;MAC7B;MACAlI,QAAQ,CAACsI,MAAM,CAAChB,OAAO,EAAE;QACvBiB,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,EAAE;QACZC,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,CAACrH,GAAG,EAAEC,GAAG,EAAEI,IAAI,EAAEmB,gBAAgB,EAAEC,cAAc,EAAEc,cAAc,CAAC,CAAC;EAEtE/D,SAAS,CAAC,YAAM;IACd,IAAM8I,oBAAoB,GAAG,OAAO/G,SAAS,KAAK,QAAQ,GAAGA,SAAS,GAAGA,SAAS,KAAK,OAAO,GAAGb,UAAU,GAAGa,SAAS,KAAK,QAAQ,GAAGZ,WAAW,GAAGC,UAAU;IAC/J,IAAM2H,IAAI,GAAG7F,SAAS,WAATA,SAAS,GAAI4F,oBAAoB;IAC9C3E,WAAW,CAACV,eAAe,GAAGuF,IAAI,CAACvH,GAAG,CAACgC,eAAe,EAAEsF,IAAI,CAAC,GAAGA,IAAI,CAAC;IACrEzE,YAAY,CAACb,eAAe,WAAfA,eAAe,GAAIqF,oBAAoB,GAAG,CAAC,CAAC;IACzDxC,mBAAmB,CAAC2C,QAAQ,CAAC,CAACF,IAAI,GAAG,CAAC,CAAC;EACzC,CAAC,EAAE,CAAChH,SAAS,EAAE0B,eAAe,CAAC,CAAC;EAGhC,IAAM6E,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIY,SAAiB,EAAE/F,QAAgB,EAAEsB,YAAoB,EAAK;IACxFyE,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,CAACD,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsB,YAAY,CAAC,GAAGA,YAAY,GAAItB,QAAQ,GAAG,CAAE;IACnGiG,YAAY,CAACF,SAAS,CAAC;IACvBhE,kBAAkB,CAACgE,SAAS,CAAC;IAC7B,IAAMG,QAAQ,GAAGL,IAAI,CAACG,KAAK,CAAE,CAACD,SAAS,GAAI/F,QAAQ,GAAG,CAAE,KAAK1B,GAAG,GAAGD,GAAG,CAAC,GAAGiE,WAAW,GAAI5D,IAAI,CAAC,GAAGA,IAAI,GAAGL,GAAG;IAC3GE,iBAAiB,CAACoG,YAAY,CAACuB,QAAQ,CAAC,CAAC;EAC3C,CAAC;EACD,IAAMD,YAAY,GAAG,SAAfA,YAAYA,CAAIF,SAAiB,EAAK;IAC1C5C,mBAAmB,CAAC2C,QAAQ,CAACC,SAAS,CAAC;IACvC7B,aAAa,CAAC4B,QAAQ,CAAC,CAACC,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsC,WAAW,GAAG,IAAI,CAAC;EAC3E,CAAC;EACD,IAAM+C,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIU,SAAiB,EAAE/F,QAAgB,EAAEsB,YAAoB,EAAK;IACtFyE,SAAS,GAAGF,IAAI,CAACM,IAAI,CAAC,CAACJ,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsB,YAAY,CAAC,GAAGA,YAAY,GAAItB,QAAQ,GAAG,CAAE;IAClGoG,UAAU,CAACL,SAAS,CAAC;IACrB5D,gBAAgB,CAAC4D,SAAS,CAAC;IAC3B,IAAMG,QAAQ,GAAGL,IAAI,CAACM,IAAI,CAAE,CAACJ,SAAS,GAAI/F,QAAQ,GAAG,CAAE,KAAK1B,GAAG,GAAGD,GAAG,CAAC,GAAGiE,WAAW,GAAI5D,IAAI,CAAC,GAAGA,IAAI,GAAGL,GAAG;IAC1GG,eAAe,CAACmG,YAAY,CAACuB,QAAQ,CAAC,CAAC;EACzC,CAAC;EACD,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAIL,SAAiB,EAAK;IACxCzC,iBAAiB,CAACwC,QAAQ,CAACC,SAAS,CAAC;IACrChC,cAAc,CAAC+B,QAAQ,CAAC,IAAI,GAAI,CAACC,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsC,WAAY,CAAC;EAC9E,CAAC;EACD,IAAMyC,WAAW,GAAG,SAAdA,WAAWA,CAAIzG,GAAW,EAAED,GAAW,EAAEK,IAAY,EAAK;IAC9D,IAAM2H,aAAa,GAAI,CAAC/H,GAAG,GAAGD,GAAG,IAAIK,IAAK;IAC1C,IAAMoG,QAAQ,GAAGxC,WAAW,GAAG+D,aAAa;IAC5C9E,eAAe,CAACuD,QAAQ,CAAC;IACzB,OAAOA,QAAQ;EACjB,CAAC;EACD,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CAAIkB,WAAmB,EAAkB;IAAA,IAAhBC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACpD,IAAMG,MAAM,GAAGJ,IAAI,IAAIlC,gBAAgB,IAAI,IAAI;IAC/C,IAAMuC,IAAI,GAAG,CAACL,IAAI,IAAIpC,cAAc,IAAI,IAAI;IAC5C,IAAIwC,MAAM,IAAIC,IAAI,EAAE;MAAA,IAAAC,QAAA;MAClB,IAAMC,YAAoB,GAAGjB,IAAI,CAACc,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC,CAAE,CAACL,WAAW,GAAItG,QAAQ,GAAG,CAAE,KAAK1B,GAAG,GAAGD,GAAG,CAAC,GAAGiE,WAAW,GAAI5D,IAAI,CAAC,GAAGA,IAAI,GAAGL,GAAG;MAC9I,IAAM4G,IAAI,GAAGP,WAAW,CAACoC,YAAY,CAAC;MACtC,CAAAD,QAAA,IAACF,MAAM,GAAGtC,gBAAgB,GAAGF,cAAc,EAAEK,OAAO,qBAApDqC,QAAA,CAAsD7B,cAAc,CAAC;QAAEC,IAAI,EAAJA;MAAK,CAAC,CAAC;IAChF;EACF,CAAC;EAGD,IAAM8B,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,KAAoC,EAAK;IACxE,IAAIV,WAAW,GAAGU,KAAK,CAACC,WAAW,CAACC,YAAY,GAAGpF,eAAe;IAClE,IAAIwE,WAAW,IAAI,CAACtG,QAAQ,GAAG,CAAC,IAAIsG,WAAW,GAAGpE,aAAa,EAAE;MAC/DiB,mBAAmB,CAAC2C,QAAQ,CAACQ,WAAW,CAAC;MACzClB,YAAY,CAACkB,WAAW,EAAE,IAAI,CAAC;MAC/BpC,aAAa,CAAC4B,QAAQ,CAAC,CAACQ,WAAW,GAAItG,QAAQ,GAAG,CAAE,IAAIsC,WAAW,GAAG,IAAI,CAAC;IAC7E;EACF,CAAC;EACD,IAAM6E,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAIH,KAAoC,EAAK;IAC9E,IAAIA,KAAK,CAACC,WAAW,CAACG,KAAK,KAAK7J,KAAK,CAAC8J,KAAK,EAAE;MAC3CC,OAAO,CAAC7D,cAAc,EAAE,CAAC,CAAC;MAC1B8D,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB;IACA,IAAIP,KAAK,CAACC,WAAW,CAACG,KAAK,KAAK7J,KAAK,CAACiK,GAAG,EAAE;MACzC,IAAIzB,SAAS,GAAGiB,KAAK,CAACC,WAAW,CAACC,YAAY,GAAGpF,eAAe;MAChEiE,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,CAACD,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsB,YAAY,CAAC,GAAGA,YAAY,GAAItB,QAAQ,GAAG,CAAE;MACnG,IAAI+F,SAAS,GAAG,CAAC/F,QAAQ,GAAG,CAAC,EAAE;QAC7B+F,SAAS,GAAG,CAAC/F,QAAQ,GAAG,CAAC;MAC3B,CAAC,MAAM,IAAI+F,SAAS,IAAI7D,aAAa,EAAE;QACrC6D,SAAS,GAAG7D,aAAa,GAAGZ,YAAY;MAC1C;MACA6D,kBAAkB,CAACY,SAAS,EAAE/F,QAAQ,EAAEsB,YAAY,CAAC;MACrDgG,OAAO,CAAC7D,cAAc,EAAE,IAAI,CAAC;IAC/B;EACF,CAAC;EAID,IAAMgE,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIT,KAAoC,EAAK;IACtE,IAAMV,WAAW,GAAGU,KAAK,CAACC,WAAW,CAACC,YAAY,GAAGhF,aAAa;IAClE,IAAIoE,WAAW,IAAIhE,WAAW,GAAGtC,QAAQ,GAAG,CAAC,IAAIsG,WAAW,GAAGxE,eAAe,EAAE;MAC9EwB,iBAAiB,CAACwC,QAAQ,CAACQ,WAAW,CAAC;MACvClB,YAAY,CAACkB,WAAW,EAAE,KAAK,CAAC;MAChCvC,cAAc,CAAC+B,QAAQ,CAAC,IAAI,GAAI,CAACQ,WAAW,GAAItG,QAAQ,GAAG,CAAE,IAAIsC,WAAY,CAAC;IAChF;EACF,CAAC;EACD,IAAMoF,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIV,KAAoC,EAAK;IAC5E,IAAIA,KAAK,CAACC,WAAW,CAACG,KAAK,KAAK7J,KAAK,CAAC8J,KAAK,EAAE;MAC3CC,OAAO,CAAC1D,YAAY,EAAE,CAAC,CAAC;MACxB2D,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IACrB;IACA,IAAIP,KAAK,CAACC,WAAW,CAACG,KAAK,KAAK7J,KAAK,CAACiK,GAAG,EAAE;MACzC,IAAIzB,SAAS,GAAGiB,KAAK,CAACC,WAAW,CAACC,YAAY,GAAGhF,aAAa;MAC9D6D,SAAS,GAAGF,IAAI,CAACM,IAAI,CAAC,CAACJ,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsB,YAAY,CAAC,GAAGA,YAAY,GAAItB,QAAQ,GAAG,CAAE;MAClG,IAAI+F,SAAS,GAAGzD,WAAW,GAAGtC,QAAQ,GAAG,CAAC,EAAE;QAC1C+F,SAAS,GAAGzD,WAAW,GAAGtC,QAAQ,GAAG,CAAC;MACxC,CAAC,MAAM,IAAI+F,SAAS,IAAIjE,eAAe,EAAE;QACvCiE,SAAS,GAAGjE,eAAe,GAAGR,YAAY;MAC5C;MACAa,gBAAgB,CAAC4D,SAAS,CAAC;MAC3BzC,iBAAiB,CAACwC,QAAQ,CAACC,SAAS,CAAC;MACrChC,cAAc,CAAC+B,QAAQ,CAAC,IAAI,GAAI,CAACC,SAAS,GAAI/F,QAAQ,GAAG,CAAE,IAAIsC,WAAY,CAAC;MAC5EgF,OAAO,CAAC1D,YAAY,EAAE,IAAI,CAAC;MAC3B,IAAMsC,QAAQ,GAAGL,IAAI,CAACM,IAAI,CAAE,CAACJ,SAAS,GAAI/F,QAAQ,GAAG,CAAE,KAAK1B,GAAG,GAAGD,GAAG,CAAC,GAAGiE,WAAW,GAAI5D,IAAI,CAAC,GAAGA,IAAI,GAAGL,GAAG;MAC1GG,eAAe,CAACmG,YAAY,CAACuB,QAAQ,CAAC,CAAC;IACzC;EACF,CAAC;EAID,IAAMoB,OAAO,GAAG,SAAVA,OAAOA,CAAIK,KAAqB,EAAEpC,OAAe;IAAA,OAAKvI,QAAQ,CAACsI,MAAM,CAACqC,KAAK,EAAE;MACjFpC,OAAO,EAAPA,OAAO;MACPC,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;IACnB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EAAA;EAEV,IAAM6B,aAAa,GAAG,SAAhBA,aAAaA,CAAIK,SAAiB,EAAErC,OAAe,EAAK;IAC5D5C,gBAAgB,CAACiF,SAAS,CAAC;IAC3B7E,cAAc,CAACwC,OAAO,CAAC;EACzB,CAAC;EAID,IAAMsC,QAAQ,GAAG,SAAXA,QAAQA,CAAIb,KAAwB,EAAK;IAC7C,IAAIpG,cAAc,KAAK,KAAK,EAAE;MAC5B,IAAQkH,KAAK,GAAKd,KAAK,CAACC,WAAW,CAACc,MAAM,CAAlCD,KAAK;MACbvF,cAAc,CAACuF,KAAK,CAAC;MACrBxE,iBAAiB,CAACwC,QAAQ,CAACgC,KAAK,GAAG9H,QAAQ,GAAG,CAAC,CAAC;MAChDmC,gBAAgB,CAAC2F,KAAK,GAAG9H,QAAQ,GAAG,CAAC,CAAC;MACtCa,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC;EAGD,IAAMmH,OAAO,GAAGjL,OAAO,CAAC;IAAA,OAAM6B,SAAS,KAAK,OAAO,GAAG,EAAE,GAAGA,SAAS,KAAK,QAAQ,GAAG,EAAE,GAAG,EAAE;EAAA,GAAE,CAACA,SAAS,CAAC,CAAC;EAEzG,OACEhB,IAAA,CAACP,sBAAsB;IAAA4K,QAAA,EACrBnK,KAAA,CAACd,QAAQ,CAACE,IAAI;MAACgL,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,EAAE;QAAE9D,OAAO,EAAPA,OAAO;QAAE0D,OAAO,EAAPA;MAAQ,CAAC,EAAE3H,oBAAoB,CAAE;MAAA4H,QAAA,GAEjFrI,eAAe,IACf9B,KAAA,CAACZ,IAAI;QAACgL,KAAK,EAAE;UAAEJ,KAAK,EAAE,MAAM;UAAEO,MAAM,EAAE,CAAC;UAAE3G,aAAa,EAAbA;QAAc,CAAE;QAAAuG,QAAA,GACvDrK,IAAA,CAACJ,UAAU;UAAOwC,QAAQ,EAARA,QAAQ;UAAEV,0BAA0B,EAA1BA,0BAA0B;UACpDgJ,UAAU,EAAEnF,mBAAoB;UAChCoF,KAAK,EAAE9E,cAAe;UACtB+E,YAAY,EAAEnE,gBAAiB;UAC/BoE,SAAS,EAAEvI;QAAoB,CAChC,CAAC,EACFtC,IAAA,CAACJ,UAAU;UAAOwC,QAAQ,EAARA,QAAQ;UAAEV,0BAA0B,EAA1BA,0BAA0B;UACpDgJ,UAAU,EAAEhF,iBAAkB;UAC9BiF,KAAK,EAAE3E,YAAa;UACpB4E,YAAY,EAAErE,cAAe;UAC7BsE,SAAS,EAAEvI;QAAoB,CAChC,CAAC;MAAA,CACE,CAAC,EAETpC,KAAA,CAACZ,IAAI;QAACgL,KAAK,EAAE;UAAEJ,KAAK,EAAE,MAAM;UAAEO,MAAM,EAAErI,QAAQ;UAAE0I,cAAc,EAAE,CAAC;UAAEC,QAAQ,EAAE,UAAU;UAAEjH,aAAa,EAAbA,aAAa;UAAEkH,UAAU,EAAE;QAAS,CAAE;QAAAX,QAAA,GAC7HrK,IAAA,CAACV,IAAI;UAACgL,KAAK,EAAE;YAAES,QAAQ,EAAE,UAAU;YAAEE,eAAe,EAAE3J,eAAe;YAAE4J,IAAI,EAAE9I,QAAQ,GAAG,CAAC;YAAE+I,UAAU,EAAE,CAAC/I,QAAQ,GAAG,CAAC;YAAEgJ,KAAK,EAAEhJ,QAAQ,GAAG,CAAC;YAAEqI,MAAM,EAAE9H;UAAU,CAAE;UAACsH,QAAQ,EAAEA;QAAS,CAAE,CAAC,EACtLjK,IAAA,CAACZ,QAAQ,CAACE,IAAI;UAACgL,KAAK,EAAE;YAAES,QAAQ,EAAE,UAAU;YAAEG,IAAI,EAAE9I,QAAQ,GAAG,CAAC;YAAE+I,UAAU,EAAE,CAAC/I,QAAQ,GAAG,CAAC;YAAEgJ,KAAK,EAAEhJ,QAAQ,GAAG,CAAC;YAAEqI,MAAM,EAAE9H,SAAS;YAAEsI,eAAe,EAAEzJ,kBAAkB;YAAE6J,SAAS,EAAE,CAAC;cAAEX,UAAU,EAAEhG,WAAW,GAAG;YAAE,CAAC,EAAE;cAAE4G,MAAM,EAAEnF;YAAe,CAAC,EAAE;cAAEuE,UAAU,EAAE,CAAChG,WAAW,GAAG;YAAE,CAAC;UAAE;QAAE,CAAE,CAAC,EAC1R1E,IAAA,CAACZ,QAAQ,CAACE,IAAI;UAACgL,KAAK,EAAE;YAAES,QAAQ,EAAE,UAAU;YAAEG,IAAI,EAAE,CAAC9I,QAAQ,GAAG,CAAC;YAAE8H,KAAK,EAAE9H,QAAQ,GAAG,CAAC;YAAEqI,MAAM,EAAE9H,SAAS;YAAE4I,YAAY,EAAE5I,SAAS;YAAEsI,eAAe,EAAEzJ;UAAmB;QAAE,CAAE,CAAC,EAC7KxB,IAAA,CAACZ,QAAQ,CAACE,IAAI;UAACgL,KAAK,EAAE;YAAEJ,KAAK,EAAExF,WAAW;YAAE+F,MAAM,EAAE9H,SAAS;YAAEsI,eAAe,EAAEzJ,kBAAkB;YAAE6J,SAAS,EAAE,CAAC;cAAEX,UAAU,EAAE,CAAChG,WAAW,GAAG;YAAE,CAAC,EAAE;cAAE4G,MAAM,EAAEhF;YAAc,CAAC,EAAE;cAAEoE,UAAU,EAAEhG,WAAW,GAAG;YAAE,CAAC;UAAE;QAAE,CAAE,CAAC,EACnN1E,IAAA,CAACZ,QAAQ,CAACE,IAAI;UAACgL,KAAK,EAAE;YAAES,QAAQ,EAAE,UAAU;YAAEG,IAAI,EAAExG,WAAW,GAAGtC,QAAQ,GAAG,CAAC;YAAE8H,KAAK,EAAE9H,QAAQ,GAAG,CAAC;YAAEqI,MAAM,EAAE9H,SAAS;YAAE4I,YAAY,EAAE5I,SAAS;YAAEsI,eAAe,EAAEzJ;UAAmB;QAAE,CAAE,CAAC,EAC1LxB,IAAA,CAACN,iBAAiB;UAAC8L,cAAc,EAAErC,uBAAwB;UAACsC,oBAAoB,EAAElC,6BAA8B;UAAAc,QAAA,EAC9GrK,IAAA,CAACZ,QAAQ,CAACE,IAAI;YAACgL,KAAK,EAAE,CAACC,MAAM,CAACmB,IAAI,EAAE;cAAEjB,MAAM,EAAErI,QAAQ;cAAE8H,KAAK,EAAE9H,QAAQ;cAAEmJ,YAAY,EAAEnJ,QAAQ;cAAE6I,eAAe,EAAE/J,aAAa;cAAEyK,SAAS,EAAE7G,aAAa;cAAEuG,SAAS,EAAE,CAAC;gBAAEX,UAAU,EAAEnF;cAAoB,CAAC;YAAE,CAAC;UAAE,CAAE;QAAC,CACjM,CAAC,EACpBvF,IAAA,CAACN,iBAAiB;UAAC8L,cAAc,EAAE3B,qBAAsB;UAAC4B,oBAAoB,EAAE3B,2BAA4B;UAAAO,QAAA,EAC1GrK,IAAA,CAACZ,QAAQ,CAACE,IAAI;YAACgL,KAAK,EAAE,CAACC,MAAM,CAACmB,IAAI,EAAE;cAAEjB,MAAM,EAAErI,QAAQ;cAAE8H,KAAK,EAAE9H,QAAQ;cAAEmJ,YAAY,EAAEnJ,QAAQ;cAAE6I,eAAe,EAAE7J,WAAW;cAAEuK,SAAS,EAAEzG,WAAW;cAAEmG,SAAS,EAAE,CAAC;gBAAEX,UAAU,EAAEhF;cAAkB,CAAC;YAAE,CAAC;UAAE,CAAE;QAAC,CAC3L,CAAC;MAAA,CAChB,CAAC,EAEL5D,eAAe,IACf5B,KAAA,CAACZ,IAAI;QAACgL,KAAK,EAAE;UAAEJ,KAAK,EAAE,MAAM;UAAEpG,aAAa,EAAbA,aAAa;UAAE8H,cAAc,EAAE;QAAgB,CAAE;QAAAvB,QAAA,GAC7ErK,IAAA,CAACT,IAAI;UAAC+K,KAAK,EAAE;YAAEuB,KAAK,EAAEjK,oBAAoB;YAAEkK,UAAU,EAAE,MAAM;YAAExL,QAAQ,EAARA;UAAS,CAAE;UAAA+J,QAAA,EAAE5J;QAAG,CAAO,CAAC,EACxFT,IAAA,CAACT,IAAI;UAAC+K,KAAK,EAAE;YAAEuB,KAAK,EAAEjK,oBAAoB;YAAEkK,UAAU,EAAE,MAAM;YAAExL,QAAQ,EAARA;UAAS,CAAE;UAAA+J,QAAA,EAAE3J;QAAG,CAAO,CAAC;MAAA,CACpF,CAAC;IAAA,CAEI;EAAC,CACM,CAAC;AAE7B,CAAC,CAAC;AAEF,IAAM6J,MAAM,GAAGlL,UAAU,CAAC0M,MAAM,CAAC;EAC/BvB,SAAS,EAAE;IACTC,MAAM,EAAE,GAAG;IACXP,KAAK,EAAE;EACT,CAAC;EACDwB,IAAI,EAAE;IACJX,QAAQ,EAAE,UAAU;IACpBY,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AAEF,eAAenM,qBAAqB,CAACe,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
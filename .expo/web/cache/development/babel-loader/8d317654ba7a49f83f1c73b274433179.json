{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nvar startNativeAnimationNextId = 1;\n\nvar Animation = function () {\n  function Animation() {\n    _classCallCheck(this, Animation);\n  }\n\n  _createClass(Animation, [{\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.__nativeId) {\n        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n      }\n    }\n  }, {\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      throw new Error('This animation type cannot be offloaded to native');\n    }\n  }, {\n    key: \"__debouncedOnEnd\",\n    value: function __debouncedOnEnd(result) {\n      var onEnd = this.__onEnd;\n      this.__onEnd = null;\n      onEnd && onEnd(result);\n    }\n  }, {\n    key: \"__startNativeAnimation\",\n    value: function __startNativeAnimation(animatedValue) {\n      var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n      startNativeAnimationNextId += 1;\n      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n      try {\n        var config = this.__getNativeAnimationConfig();\n\n        animatedValue.__makeNative(config.platformConfig);\n\n        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, this.__debouncedOnEnd.bind(this));\n      } catch (e) {\n        throw e;\n      } finally {\n        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n      }\n    }\n  }]);\n\n  return Animation;\n}();\n\nexport default Animation;","map":{"version":3,"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__nativeId","API","stopAnimation","Error","result","__onEnd","startNativeAnimationWaitId","setWaitingForIdentifier","config","__getNativeAnimationConfig","__makeNative","platformConfig","generateNewAnimationId","startAnimatingNode","__getNativeTag","__debouncedOnEnd","bind","e","unsetWaitingForIdentifier"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1;\n\n// Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n  // Helper function for subclasses to make sure onEnd is only called once.\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n    try {\n      var config = this.__getNativeAnimationConfig();\n      animatedValue.__makeNative(config.platformConfig);\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config,\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n}\nexport default Animation;"],"mappings":"AAUA;;;;AAEA,OAAOA,oBAAP;AACA,IAAIC,0BAA0B,GAAG,CAAjC;;IAKMC,S;;;;;;;WACJ,eAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,iBAAlC,EAAqDC,aAArD,EAAoE,CAAE;;;WACtE,gBAAO;MACL,IAAI,KAAKC,UAAT,EAAqB;QACnBR,oBAAoB,CAACS,GAArB,CAAyBC,aAAzB,CAAuC,KAAKF,UAA5C;MACD;IACF;;;WACD,sCAA6B;MAG3B,MAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;IACD;;;WAED,0BAAiBC,MAAjB,EAAyB;MACvB,IAAIP,KAAK,GAAG,KAAKQ,OAAjB;MACA,KAAKA,OAAL,GAAe,IAAf;MACAR,KAAK,IAAIA,KAAK,CAACO,MAAD,CAAd;IACD;;;WACD,gCAAuBL,aAAvB,EAAsC;MACpC,IAAIO,0BAA0B,GAAGb,0BAA0B,GAAG,iBAA9D;MACAA,0BAA0B,IAAI,CAA9B;MACAD,oBAAoB,CAACS,GAArB,CAAyBM,uBAAzB,CAAiDD,0BAAjD;;MACA,IAAI;QACF,IAAIE,MAAM,GAAG,KAAKC,0BAAL,EAAb;;QACAV,aAAa,CAACW,YAAd,CAA2BF,MAAM,CAACG,cAAlC;;QACA,KAAKX,UAAL,GAAkBR,oBAAoB,CAACoB,sBAArB,EAAlB;QACApB,oBAAoB,CAACS,GAArB,CAAyBY,kBAAzB,CAA4C,KAAKb,UAAjD,EAA6DD,aAAa,CAACe,cAAd,EAA7D,EAA6FN,MAA7F,EAEA,KAAKO,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAFA;MAGD,CAPD,CAOE,OAAOC,CAAP,EAAU;QACV,MAAMA,CAAN;MACD,CATD,SASU;QACRzB,oBAAoB,CAACS,GAArB,CAAyBiB,yBAAzB,CAAmDZ,0BAAnD;MACD;IACF;;;;;;AAEH,eAAeZ,SAAf"},"metadata":{},"sourceType":"module"}
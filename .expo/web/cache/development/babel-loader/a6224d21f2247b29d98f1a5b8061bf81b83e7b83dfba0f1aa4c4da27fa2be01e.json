{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _unregisterTaskAsync;\nimport { UnavailabilityError } from 'expo-modules-core';\nimport BackgroundNotificationTasksModule from \"./BackgroundNotificationTasksModule.native\";\nexport default function unregisterTaskAsync(_x) {\n  return (_unregisterTaskAsync = _unregisterTaskAsync || _asyncToGenerator(function* (taskName) {\n    if (!BackgroundNotificationTasksModule.unregisterTaskAsync) {\n      throw new UnavailabilityError('Notifications', 'unregisterTaskAsync');\n    }\n    return yield BackgroundNotificationTasksModule.unregisterTaskAsync(taskName);\n  })).apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","BackgroundNotificationTasksModule","unregisterTaskAsync","_x","_unregisterTaskAsync","_asyncToGenerator","taskName","apply","arguments"],"sources":["/Users/syndell-068/Documents/GitHub/colorhunt-reactnative-frontend/node_modules/expo-notifications/src/unregisterTaskAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport BackgroundNotificationTasksModule from './BackgroundNotificationTasksModule.native';\n\n/**\n * Used to unregister tasks registered with `registerTaskAsync` method.\n * @param taskName The string you passed to `registerTaskAsync` as the `taskName` parameter.\n * @header inBackground\n */\nexport default async function unregisterTaskAsync(taskName: string): Promise<null> {\n  if (!BackgroundNotificationTasksModule.unregisterTaskAsync) {\n    throw new UnavailabilityError('Notifications', 'unregisterTaskAsync');\n  }\n\n  return await BackgroundNotificationTasksModule.unregisterTaskAsync(taskName);\n}\n"],"mappings":";;AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,iCAAiC;AAOxC,wBAA8BC,mBAAmBA,CAAAC,EAAA;EAAA,QAAAC,oBAAA,GAAAA,oBAAA,IAAAC,iBAAA,CAAlC,WAAmCC,QAAgB;IAChE,IAAI,CAACL,iCAAiC,CAACC,mBAAmB,EAAE;MAC1D,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;;IAGvE,aAAaC,iCAAiC,CAACC,mBAAmB,CAACI,QAAQ,CAAC;EAC9E,CAAC,GAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
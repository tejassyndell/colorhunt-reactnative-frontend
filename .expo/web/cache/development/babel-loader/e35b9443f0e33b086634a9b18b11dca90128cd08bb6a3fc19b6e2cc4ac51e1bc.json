{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Filter = function Filter(_ref) {\n  var categoriesData = _ref.categoriesData,\n    selectedCategories = _ref.selectedCategories,\n    setCategories = _ref.setCategories,\n    clearFilters = _ref.clearFilters,\n    applyFilters = _ref.applyFilters,\n    isVisible = _ref.isVisible,\n    onClose = _ref.onClose;\n  var catagoryHandler = function catagoryHandler(selectedCategory) {\n    if (selectedCategories.includes(selectedCategory)) {\n      setCategories(selectedCategories.filter(function (cat) {\n        return cat !== selectedCategory;\n      }));\n    } else {\n      setCategories([].concat(_toConsumableArray(selectedCategories), [selectedCategory]));\n    }\n  };\n  return _jsxs(View, {\n    style: [styles.filterContainer, isVisible ? styles.visible : styles.hidden],\n    children: [categoriesData.map(function (category) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return catagoryHandler(category.Category);\n        },\n        children: _jsx(Text, {\n          children: category.Category\n        })\n      }, category.id);\n    }), _jsx(TouchableOpacity, {\n      onPress: clearFilters,\n      children: _jsx(Text, {\n        children: \"Reset\"\n      })\n    }), _jsx(TouchableOpacity, {\n      onPress: applyFilters,\n      children: _jsx(Text, {\n        children: \"Apply\"\n      })\n    }), _jsx(Text, {\n      children: \"Filter Options\"\n    }), _jsx(TouchableOpacity, {\n      onPress: onClose,\n      children: _jsx(Text, {\n        children: \"Close\"\n      })\n    })]\n  });\n};\nexport default Filter;","map":{"version":3,"names":["React","View","Text","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","Filter","_ref","categoriesData","selectedCategories","setCategories","clearFilters","applyFilters","isVisible","onClose","catagoryHandler","selectedCategory","includes","filter","cat","concat","_toConsumableArray","style","styles","filterContainer","visible","hidden","children","map","category","onPress","Category","id"],"sources":["E:/Hitesh/colorhunt-reactnative-frontend/src/components/Fliter/filter.js"],"sourcesContent":["import React from \"react\";\r\nimport { View, Text, TouchableOpacity } from \"react-native\";\r\n\r\nconst Filter = ({\r\n  categoriesData,\r\n  selectedCategories,\r\n  setCategories,\r\n  clearFilters,\r\n  applyFilters,\r\n  isVisible,\r\n  onClose\r\n}) => {\r\n  const catagoryHandler = (selectedCategory) => {\r\n    if (selectedCategories.includes(selectedCategory)) {\r\n      setCategories(\r\n        selectedCategories.filter((cat) => cat !== selectedCategory)\r\n      );\r\n    } else {\r\n      setCategories([...selectedCategories, selectedCategory]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.filterContainer, isVisible ? styles.visible : styles.hidden]}>\r\n      {categoriesData.map((category) => (\r\n        \r\n        <TouchableOpacity\r\n          key={category.id}\r\n          onPress={() => catagoryHandler(category.Category)}\r\n        >\r\n          <Text>{category.Category}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n\r\n      <TouchableOpacity onPress={clearFilters}>\r\n        <Text>Reset</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity onPress={applyFilters}>\r\n        <Text>Apply</Text>\r\n      </TouchableOpacity>\r\n      <Text>Filter Options</Text>\r\n      <TouchableOpacity onPress={onClose}>\r\n        <Text>Close</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG1B,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAAC,IAAA,EAQN;EAAA,IAPJC,cAAc,GAAAD,IAAA,CAAdC,cAAc;IACdC,kBAAkB,GAAAF,IAAA,CAAlBE,kBAAkB;IAClBC,aAAa,GAAAH,IAAA,CAAbG,aAAa;IACbC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;IACZC,YAAY,GAAAL,IAAA,CAAZK,YAAY;IACZC,SAAS,GAAAN,IAAA,CAATM,SAAS;IACTC,OAAO,GAAAP,IAAA,CAAPO,OAAO;EAEP,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,gBAAgB,EAAK;IAC5C,IAAIP,kBAAkB,CAACQ,QAAQ,CAACD,gBAAgB,CAAC,EAAE;MACjDN,aAAa,CACXD,kBAAkB,CAACS,MAAM,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,KAAKH,gBAAgB;MAAA,EAC7D,CAAC;IACH,CAAC,MAAM;MACLN,aAAa,IAAAU,MAAA,CAAAC,kBAAA,CAAKZ,kBAAkB,IAAEO,gBAAgB,EAAC,CAAC;IAC1D;EACF,CAAC;EAED,OACEX,KAAA,CAACN,IAAI;IAACuB,KAAK,EAAE,CAACC,MAAM,CAACC,eAAe,EAAEX,SAAS,GAAGU,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG,MAAM,CAAE;IAAAC,QAAA,GAC/EnB,cAAc,CAACoB,GAAG,CAAC,UAACC,QAAQ;MAAA,OAE3B1B,IAAA,CAACF,gBAAgB;QAEf6B,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMf,eAAe,CAACc,QAAQ,CAACE,QAAQ,CAAC;QAAA,CAAC;QAAAJ,QAAA,EAElDxB,IAAA,CAACH,IAAI;UAAA2B,QAAA,EAAEE,QAAQ,CAACE;QAAQ,CAAO;MAAC,GAH3BF,QAAQ,CAACG,EAIE,CAAC;IAAA,CACpB,CAAC,EAEF7B,IAAA,CAACF,gBAAgB;MAAC6B,OAAO,EAAEnB,YAAa;MAAAgB,QAAA,EACtCxB,IAAA,CAACH,IAAI;QAAA2B,QAAA,EAAC;MAAK,CAAM;IAAC,CACF,CAAC,EACnBxB,IAAA,CAACF,gBAAgB;MAAC6B,OAAO,EAAElB,YAAa;MAAAe,QAAA,EACtCxB,IAAA,CAACH,IAAI;QAAA2B,QAAA,EAAC;MAAK,CAAM;IAAC,CACF,CAAC,EACnBxB,IAAA,CAACH,IAAI;MAAA2B,QAAA,EAAC;IAAc,CAAM,CAAC,EAC3BxB,IAAA,CAACF,gBAAgB;MAAC6B,OAAO,EAAEhB,OAAQ;MAAAa,QAAA,EACjCxB,IAAA,CAACH,IAAI;QAAA2B,QAAA,EAAC;MAAK,CAAM;IAAC,CACF,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,eAAerB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}